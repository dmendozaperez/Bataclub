/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing BouncesAPIApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BouncesAPIApiTests
    {
        private BouncesAPIApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BouncesAPIApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BouncesAPIApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BouncesAPIApi
            //Assert.IsInstanceOfType(typeof(BouncesAPIApi), instance, "instance is a BouncesAPIApi");
        }

        
        /// <summary>
        /// Test ActivateBounce
        /// </summary>
        [Test]
        public void ActivateBounceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string accept = null;
            //string xTrxApiKey = null;
            //int? bounceid = null;
            //var response = instance.ActivateBounce(contentType, accept, xTrxApiKey, bounceid);
            //Assert.IsInstanceOf<InlineResponse2005> (response, "response is InlineResponse2005");
        }
        
        /// <summary>
        /// Test GetBounceDump
        /// </summary>
        [Test]
        public void GetBounceDumpTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? bounceid = null;
            //var response = instance.GetBounceDump(accept, xTrxApiKey, bounceid);
            //Assert.IsInstanceOf<InlineResponse2004> (response, "response is InlineResponse2004");
        }
        
        /// <summary>
        /// Test GetBounceSingle
        /// </summary>
        [Test]
        public void GetBounceSingleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? bounceid = null;
            //var response = instance.GetBounceSingle(accept, xTrxApiKey, bounceid);
            //Assert.IsInstanceOf<InlineResponse2003> (response, "response is InlineResponse2003");
        }
        
        /// <summary>
        /// Test GetBounces
        /// </summary>
        [Test]
        public void GetBouncesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? count = null;
            //int? offset = null;
            //string type = null;
            //bool? inactive = null;
            //string emailFilter = null;
            //string tag = null;
            //string messageID = null;
            //string fromdate = null;
            //string todate = null;
            //var response = instance.GetBounces(accept, xTrxApiKey, count, offset, type, inactive, emailFilter, tag, messageID, fromdate, todate);
            //Assert.IsInstanceOf<InlineResponse2003> (response, "response is InlineResponse2003");
        }
        
        /// <summary>
        /// Test GetTags
        /// </summary>
        [Test]
        public void GetTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //var response = instance.GetTags(accept, xTrxApiKey);
            //Assert.IsInstanceOf<InlineResponse2006> (response, "response is InlineResponse2006");
        }
        
        /// <summary>
        /// Test GetdeliveryStatus
        /// </summary>
        [Test]
        public void GetdeliveryStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //var response = instance.GetdeliveryStatus(accept, xTrxApiKey);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
    }

}
