/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TagsTriggersAPIApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TagsTriggersAPIApiTests
    {
        private TagsTriggersAPIApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TagsTriggersAPIApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TagsTriggersAPIApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TagsTriggersAPIApi
            //Assert.IsInstanceOfType(typeof(TagsTriggersAPIApi), instance, "instance is a TagsTriggersAPIApi");
        }

        
        /// <summary>
        /// Test CreateTriggerForTag
        /// </summary>
        [Test]
        public void CreateTriggerForTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string accept = null;
            //string xTrxApiKey = null;
            //CreateTriggerForTag body = null;
            //var response = instance.CreateTriggerForTag(contentType, accept, xTrxApiKey, body);
            //Assert.IsInstanceOf<InlineResponse20037> (response, "response is InlineResponse20037");
        }
        
        /// <summary>
        /// Test DeleteSingleATrigger
        /// </summary>
        [Test]
        public void DeleteSingleATriggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? triggerid = null;
            //var response = instance.DeleteSingleATrigger(accept, xTrxApiKey, triggerid);
            //Assert.IsInstanceOf<InlineResponse20040> (response, "response is InlineResponse20040");
        }
        
        /// <summary>
        /// Test EditSingleTrigger
        /// </summary>
        [Test]
        public void EditSingleTriggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string accept = null;
            //string xTrxApiKey = null;
            //int? triggerid = null;
            //EditSingleTrigger body = null;
            //var response = instance.EditSingleTrigger(contentType, accept, xTrxApiKey, triggerid, body);
            //Assert.IsInstanceOf<InlineResponse20039> (response, "response is InlineResponse20039");
        }
        
        /// <summary>
        /// Test GetSingleTrigger
        /// </summary>
        [Test]
        public void GetSingleTriggerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? triggerid = null;
            //var response = instance.GetSingleTrigger(accept, xTrxApiKey, triggerid);
            //Assert.IsInstanceOf<InlineResponse20038> (response, "response is InlineResponse20038");
        }
        
        /// <summary>
        /// Test SearchTriggers
        /// </summary>
        [Test]
        public void SearchTriggersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string accept = null;
            //string xTrxApiKey = null;
            //int? count = null;
            //int? offset = null;
            //int? matchName = null;
            //var response = instance.SearchTriggers(contentType, accept, xTrxApiKey, count, offset, matchName);
            //Assert.IsInstanceOf<InlineResponse20036> (response, "response is InlineResponse20036");
        }
        
    }

}
