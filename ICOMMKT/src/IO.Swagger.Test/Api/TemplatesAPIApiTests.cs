/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TemplatesAPIApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TemplatesAPIApiTests
    {
        private TemplatesAPIApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TemplatesAPIApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TemplatesAPIApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TemplatesAPIApi
            //Assert.IsInstanceOfType(typeof(TemplatesAPIApi), instance, "instance is a TemplatesAPIApi");
        }

        
        /// <summary>
        /// Test CreateTemplate
        /// </summary>
        [Test]
        public void CreateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //CreateTemplate body = null;
            //var response = instance.CreateTemplate(accept, xTrxApiKey, body);
            //Assert.IsInstanceOf<InlineResponse2008> (response, "response is InlineResponse2008");
        }
        
        /// <summary>
        /// Test DeleteTemplate
        /// </summary>
        [Test]
        public void DeleteTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? templateIdOrAlias = null;
            //var response = instance.DeleteTemplate(accept, xTrxApiKey, templateIdOrAlias);
            //Assert.IsInstanceOf<InlineResponse20010> (response, "response is InlineResponse20010");
        }
        
        /// <summary>
        /// Test EditTemplate
        /// </summary>
        [Test]
        public void EditTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? templateIdOrAlias = null;
            //EditTemplate body = null;
            //var response = instance.EditTemplate(accept, xTrxApiKey, templateIdOrAlias, body);
            //Assert.IsInstanceOf<InlineResponse2008> (response, "response is InlineResponse2008");
        }
        
        /// <summary>
        /// Test GetListTemplates
        /// </summary>
        [Test]
        public void GetListTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? count = null;
            //int? offset = null;
            //var response = instance.GetListTemplates(accept, xTrxApiKey, count, offset);
            //Assert.IsInstanceOf<InlineResponse2007> (response, "response is InlineResponse2007");
        }
        
        /// <summary>
        /// Test GetTemplate
        /// </summary>
        [Test]
        public void GetTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? templateIdOrAlias = null;
            //var response = instance.GetTemplate(accept, xTrxApiKey, templateIdOrAlias);
            //Assert.IsInstanceOf<InlineResponse2009> (response, "response is InlineResponse2009");
        }
        
        /// <summary>
        /// Test SendBatchTemplatedEmail
        /// </summary>
        [Test]
        public void SendBatchTemplatedEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string accept = null;
            //string xTrxApiKey = null;
            //SendBatchTemplatedEmail body = null;
            //var response = instance.SendBatchTemplatedEmail(contentType, accept, xTrxApiKey, body);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SendTemplatedEmail
        /// </summary>
        [Test]
        public void SendTemplatedEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //SendTemplatedEmail body = null;
            //var response = instance.SendTemplatedEmail(accept, xTrxApiKey, body);
            //Assert.IsInstanceOf<InlineResponse20012> (response, "response is InlineResponse20012");
        }
        
        /// <summary>
        /// Test ValidateTemplate
        /// </summary>
        [Test]
        public void ValidateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //ValidateTemplate body = null;
            //var response = instance.ValidateTemplate(accept, xTrxApiKey, body);
            //Assert.IsInstanceOf<InlineResponse20011> (response, "response is InlineResponse20011");
        }
        
    }

}
