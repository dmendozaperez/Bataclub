/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing MessagesAPIApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MessagesAPIApiTests
    {
        private MessagesAPIApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MessagesAPIApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MessagesAPIApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MessagesAPIApi
            //Assert.IsInstanceOfType(typeof(MessagesAPIApi), instance, "instance is a MessagesAPIApi");
        }

        
        /// <summary>
        /// Test BypassRulesForBlockedInboundMessage
        /// </summary>
        [Test]
        public void BypassRulesForBlockedInboundMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? messageid = null;
            //var response = instance.BypassRulesForBlockedInboundMessage(accept, xTrxApiKey, messageid);
            //Assert.IsInstanceOf<InlineResponse20018> (response, "response is InlineResponse20018");
        }
        
        /// <summary>
        /// Test GetClicksForSingleMessage
        /// </summary>
        [Test]
        public void GetClicksForSingleMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? messageid = null;
            //int? count = null;
            //int? offset = null;
            //var response = instance.GetClicksForSingleMessage(accept, xTrxApiKey, messageid, count, offset);
            //Assert.IsInstanceOf<InlineResponse20022> (response, "response is InlineResponse20022");
        }
        
        /// <summary>
        /// Test GetInboundMessageDetails
        /// </summary>
        [Test]
        public void GetInboundMessageDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? messageid = null;
            //var response = instance.GetInboundMessageDetails(accept, xTrxApiKey, messageid);
            //Assert.IsInstanceOf<InlineResponse20017> (response, "response is InlineResponse20017");
        }
        
        /// <summary>
        /// Test GetInboundMessageSearch
        /// </summary>
        [Test]
        public void GetInboundMessageSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? count = null;
            //int? offset = null;
            //string recipient = null;
            //string fromemail = null;
            //string tag = null;
            //string subject = null;
            //string mailboxhash = null;
            //string status = null;
            //string todate = null;
            //string fromdate = null;
            //var response = instance.GetInboundMessageSearch(accept, xTrxApiKey, count, offset, recipient, fromemail, tag, subject, mailboxhash, status, todate, fromdate);
            //Assert.IsInstanceOf<InlineResponse20016> (response, "response is InlineResponse20016");
        }
        
        /// <summary>
        /// Test GetMessageClicks
        /// </summary>
        [Test]
        public void GetMessageClicksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? count = null;
            //int? offset = null;
            //string recipient = null;
            //string tag = null;
            //string clientName = null;
            //string clientCompany = null;
            //string clientFamily = null;
            //string osName = null;
            //string osFamily = null;
            //string osCompany = null;
            //string platform = null;
            //string country = null;
            //string region = null;
            //string city = null;
            //var response = instance.GetMessageClicks(accept, xTrxApiKey, count, offset, recipient, tag, clientName, clientCompany, clientFamily, osName, osFamily, osCompany, platform, country, region, city);
            //Assert.IsInstanceOf<InlineResponse20022> (response, "response is InlineResponse20022");
        }
        
        /// <summary>
        /// Test GetMessageOpens
        /// </summary>
        [Test]
        public void GetMessageOpensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? count = null;
            //int? offset = null;
            //string recipient = null;
            //string tag = null;
            //string clientName = null;
            //string clientCompany = null;
            //string clientFamily = null;
            //string osName = null;
            //string osFamily = null;
            //string osCompany = null;
            //string platform = null;
            //string country = null;
            //string region = null;
            //string city = null;
            //var response = instance.GetMessageOpens(accept, xTrxApiKey, count, offset, recipient, tag, clientName, clientCompany, clientFamily, osName, osFamily, osCompany, platform, country, region, city);
            //Assert.IsInstanceOf<InlineResponse20020> (response, "response is InlineResponse20020");
        }
        
        /// <summary>
        /// Test GetOpensForSingleMessage
        /// </summary>
        [Test]
        public void GetOpensForSingleMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? messageid = null;
            //int? count = null;
            //int? offset = null;
            //var response = instance.GetOpensForSingleMessage(accept, xTrxApiKey, messageid, count, offset);
            //Assert.IsInstanceOf<InlineResponse20021> (response, "response is InlineResponse20021");
        }
        
        /// <summary>
        /// Test GetOutboundMessageDetails
        /// </summary>
        [Test]
        public void GetOutboundMessageDetailsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? messageid = null;
            //var response = instance.GetOutboundMessageDetails(accept, xTrxApiKey, messageid);
            //Assert.IsInstanceOf<InlineResponse20014> (response, "response is InlineResponse20014");
        }
        
        /// <summary>
        /// Test GetOutboundMessageDump
        /// </summary>
        [Test]
        public void GetOutboundMessageDumpTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? messageid = null;
            //var response = instance.GetOutboundMessageDump(accept, xTrxApiKey, messageid);
            //Assert.IsInstanceOf<InlineResponse20015> (response, "response is InlineResponse20015");
        }
        
        /// <summary>
        /// Test GetOutboundMessageSearch
        /// </summary>
        [Test]
        public void GetOutboundMessageSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? count = null;
            //int? offset = null;
            //string subject = null;
            //string recipient = null;
            //string fromemail = null;
            //string tag = null;
            //string status = null;
            //string todate = null;
            //string fromdate = null;
            //var response = instance.GetOutboundMessageSearch(accept, xTrxApiKey, count, offset, subject, recipient, fromemail, tag, status, todate, fromdate);
            //Assert.IsInstanceOf<InlineResponse20013> (response, "response is InlineResponse20013");
        }
        
        /// <summary>
        /// Test RetryFailedInboundMessageForProcessing
        /// </summary>
        [Test]
        public void RetryFailedInboundMessageForProcessingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accept = null;
            //string xTrxApiKey = null;
            //int? messageid = null;
            //var response = instance.RetryFailedInboundMessageForProcessing(accept, xTrxApiKey, messageid);
            //Assert.IsInstanceOf<InlineResponse20019> (response, "response is InlineResponse20019");
        }
        
    }

}
