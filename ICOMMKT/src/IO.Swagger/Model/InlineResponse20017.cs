/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20017
    /// </summary>
    [DataContract]
    public partial class InlineResponse20017 :  IEquatable<InlineResponse20017>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20017" /> class.
        /// </summary>
        /// <param name="attachments">attachments.</param>
        /// <param name="blockedReason">blockedReason.</param>
        /// <param name="cc">cc.</param>
        /// <param name="ccFull">ccFull.</param>
        /// <param name="date">date.</param>
        /// <param name="from">from.</param>
        /// <param name="fromFull">fromFull.</param>
        /// <param name="fromName">fromName.</param>
        /// <param name="headers">headers.</param>
        /// <param name="htmlBody">htmlBody.</param>
        /// <param name="mailboxHash">mailboxHash.</param>
        /// <param name="messageID">messageID.</param>
        /// <param name="originalRecipient">originalRecipient.</param>
        /// <param name="replyTo">replyTo.</param>
        /// <param name="status">status.</param>
        /// <param name="subject">subject.</param>
        /// <param name="tag">tag.</param>
        /// <param name="textBody">textBody.</param>
        /// <param name="to">to.</param>
        /// <param name="toFull">toFull.</param>
        public InlineResponse20017(List<InlineResponse20016Attachments> attachments = default(List<InlineResponse20016Attachments>), string blockedReason = default(string), string cc = default(string), string ccFull = default(string), string date = default(string), string from = default(string), List<InlineResponse20016FromFull> fromFull = default(List<InlineResponse20016FromFull>), string fromName = default(string), List<InlineResponse20017Headers> headers = default(List<InlineResponse20017Headers>), string htmlBody = default(string), string mailboxHash = default(string), string messageID = default(string), string originalRecipient = default(string), string replyTo = default(string), string status = default(string), string subject = default(string), string tag = default(string), string textBody = default(string), string to = default(string), List<InlineResponse20016ToFull> toFull = default(List<InlineResponse20016ToFull>))
        {
            this.Attachments = attachments;
            this.BlockedReason = blockedReason;
            this.Cc = cc;
            this.CcFull = ccFull;
            this.Date = date;
            this.From = from;
            this.FromFull = fromFull;
            this.FromName = fromName;
            this.Headers = headers;
            this.HtmlBody = htmlBody;
            this.MailboxHash = mailboxHash;
            this.MessageID = messageID;
            this.OriginalRecipient = originalRecipient;
            this.ReplyTo = replyTo;
            this.Status = status;
            this.Subject = subject;
            this.Tag = tag;
            this.TextBody = textBody;
            this.To = to;
            this.ToFull = toFull;
        }
        
        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name="Attachments", EmitDefaultValue=false)]
        public List<InlineResponse20016Attachments> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets BlockedReason
        /// </summary>
        [DataMember(Name="BlockedReason", EmitDefaultValue=false)]
        public string BlockedReason { get; set; }

        /// <summary>
        /// Gets or Sets Cc
        /// </summary>
        [DataMember(Name="Cc", EmitDefaultValue=false)]
        public string Cc { get; set; }

        /// <summary>
        /// Gets or Sets CcFull
        /// </summary>
        [DataMember(Name="CcFull", EmitDefaultValue=false)]
        public string CcFull { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets FromFull
        /// </summary>
        [DataMember(Name="FromFull", EmitDefaultValue=false)]
        public List<InlineResponse20016FromFull> FromFull { get; set; }

        /// <summary>
        /// Gets or Sets FromName
        /// </summary>
        [DataMember(Name="FromName", EmitDefaultValue=false)]
        public string FromName { get; set; }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [DataMember(Name="Headers", EmitDefaultValue=false)]
        public List<InlineResponse20017Headers> Headers { get; set; }

        /// <summary>
        /// Gets or Sets HtmlBody
        /// </summary>
        [DataMember(Name="HtmlBody", EmitDefaultValue=false)]
        public string HtmlBody { get; set; }

        /// <summary>
        /// Gets or Sets MailboxHash
        /// </summary>
        [DataMember(Name="MailboxHash", EmitDefaultValue=false)]
        public string MailboxHash { get; set; }

        /// <summary>
        /// Gets or Sets MessageID
        /// </summary>
        [DataMember(Name="MessageID", EmitDefaultValue=false)]
        public string MessageID { get; set; }

        /// <summary>
        /// Gets or Sets OriginalRecipient
        /// </summary>
        [DataMember(Name="OriginalRecipient", EmitDefaultValue=false)]
        public string OriginalRecipient { get; set; }

        /// <summary>
        /// Gets or Sets ReplyTo
        /// </summary>
        [DataMember(Name="ReplyTo", EmitDefaultValue=false)]
        public string ReplyTo { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="Subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name="Tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets TextBody
        /// </summary>
        [DataMember(Name="TextBody", EmitDefaultValue=false)]
        public string TextBody { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets ToFull
        /// </summary>
        [DataMember(Name="ToFull", EmitDefaultValue=false)]
        public List<InlineResponse20016ToFull> ToFull { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20017 {\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  BlockedReason: ").Append(BlockedReason).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  CcFull: ").Append(CcFull).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  FromFull: ").Append(FromFull).Append("\n");
            sb.Append("  FromName: ").Append(FromName).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  HtmlBody: ").Append(HtmlBody).Append("\n");
            sb.Append("  MailboxHash: ").Append(MailboxHash).Append("\n");
            sb.Append("  MessageID: ").Append(MessageID).Append("\n");
            sb.Append("  OriginalRecipient: ").Append(OriginalRecipient).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  TextBody: ").Append(TextBody).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ToFull: ").Append(ToFull).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20017);
        }

        /// <summary>
        /// Returns true if InlineResponse20017 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20017 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20017 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.BlockedReason == input.BlockedReason ||
                    (this.BlockedReason != null &&
                    this.BlockedReason.Equals(input.BlockedReason))
                ) && 
                (
                    this.Cc == input.Cc ||
                    (this.Cc != null &&
                    this.Cc.Equals(input.Cc))
                ) && 
                (
                    this.CcFull == input.CcFull ||
                    (this.CcFull != null &&
                    this.CcFull.Equals(input.CcFull))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.FromFull == input.FromFull ||
                    this.FromFull != null &&
                    this.FromFull.SequenceEqual(input.FromFull)
                ) && 
                (
                    this.FromName == input.FromName ||
                    (this.FromName != null &&
                    this.FromName.Equals(input.FromName))
                ) && 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                ) && 
                (
                    this.HtmlBody == input.HtmlBody ||
                    (this.HtmlBody != null &&
                    this.HtmlBody.Equals(input.HtmlBody))
                ) && 
                (
                    this.MailboxHash == input.MailboxHash ||
                    (this.MailboxHash != null &&
                    this.MailboxHash.Equals(input.MailboxHash))
                ) && 
                (
                    this.MessageID == input.MessageID ||
                    (this.MessageID != null &&
                    this.MessageID.Equals(input.MessageID))
                ) && 
                (
                    this.OriginalRecipient == input.OriginalRecipient ||
                    (this.OriginalRecipient != null &&
                    this.OriginalRecipient.Equals(input.OriginalRecipient))
                ) && 
                (
                    this.ReplyTo == input.ReplyTo ||
                    (this.ReplyTo != null &&
                    this.ReplyTo.Equals(input.ReplyTo))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.TextBody == input.TextBody ||
                    (this.TextBody != null &&
                    this.TextBody.Equals(input.TextBody))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.ToFull == input.ToFull ||
                    this.ToFull != null &&
                    this.ToFull.SequenceEqual(input.ToFull)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                if (this.BlockedReason != null)
                    hashCode = hashCode * 59 + this.BlockedReason.GetHashCode();
                if (this.Cc != null)
                    hashCode = hashCode * 59 + this.Cc.GetHashCode();
                if (this.CcFull != null)
                    hashCode = hashCode * 59 + this.CcFull.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.FromFull != null)
                    hashCode = hashCode * 59 + this.FromFull.GetHashCode();
                if (this.FromName != null)
                    hashCode = hashCode * 59 + this.FromName.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                if (this.HtmlBody != null)
                    hashCode = hashCode * 59 + this.HtmlBody.GetHashCode();
                if (this.MailboxHash != null)
                    hashCode = hashCode * 59 + this.MailboxHash.GetHashCode();
                if (this.MessageID != null)
                    hashCode = hashCode * 59 + this.MessageID.GetHashCode();
                if (this.OriginalRecipient != null)
                    hashCode = hashCode * 59 + this.OriginalRecipient.GetHashCode();
                if (this.ReplyTo != null)
                    hashCode = hashCode * 59 + this.ReplyTo.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.TextBody != null)
                    hashCode = hashCode * 59 + this.TextBody.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.ToFull != null)
                    hashCode = hashCode * 59 + this.ToFull.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
