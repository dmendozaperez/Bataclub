/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse2005Bounces
    /// </summary>
    [DataContract]
    public partial class InlineResponse2005Bounces :  IEquatable<InlineResponse2005Bounces>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2005Bounces" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse2005Bounces() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2005Bounces" /> class.
        /// </summary>
        /// <param name="iD">iD (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="typeCode">typeCode (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="tag">tag (required).</param>
        /// <param name="messageID">messageID (required).</param>
        /// <param name="serverID">serverID (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="details">details (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="from">from (required).</param>
        /// <param name="bouncedAt">bouncedAt (required).</param>
        /// <param name="dumpAvailable">dumpAvailable (required).</param>
        /// <param name="inactive">inactive (required).</param>
        /// <param name="canActivate">canActivate (required).</param>
        /// <param name="subject">subject (required).</param>
        /// <param name="content">content (required).</param>
        public InlineResponse2005Bounces(string iD = default(string), string type = default(string), int? typeCode = default(int?), string name = default(string), string tag = default(string), string messageID = default(string), string serverID = default(string), string description = default(string), string details = default(string), string email = default(string), string from = default(string), string bouncedAt = default(string), bool? dumpAvailable = default(bool?), bool? inactive = default(bool?), bool? canActivate = default(bool?), string subject = default(string), string content = default(string))
        {
            // to ensure "iD" is required (not null)
            if (iD == null)
            {
                throw new InvalidDataException("iD is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.ID = iD;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "typeCode" is required (not null)
            if (typeCode == null)
            {
                throw new InvalidDataException("typeCode is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.TypeCode = typeCode;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "tag" is required (not null)
            if (tag == null)
            {
                throw new InvalidDataException("tag is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.Tag = tag;
            }
            // to ensure "messageID" is required (not null)
            if (messageID == null)
            {
                throw new InvalidDataException("messageID is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.MessageID = messageID;
            }
            // to ensure "serverID" is required (not null)
            if (serverID == null)
            {
                throw new InvalidDataException("serverID is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.ServerID = serverID;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "details" is required (not null)
            if (details == null)
            {
                throw new InvalidDataException("details is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.Details = details;
            }
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.From = from;
            }
            // to ensure "bouncedAt" is required (not null)
            if (bouncedAt == null)
            {
                throw new InvalidDataException("bouncedAt is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.BouncedAt = bouncedAt;
            }
            // to ensure "dumpAvailable" is required (not null)
            if (dumpAvailable == null)
            {
                throw new InvalidDataException("dumpAvailable is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.DumpAvailable = dumpAvailable;
            }
            // to ensure "inactive" is required (not null)
            if (inactive == null)
            {
                throw new InvalidDataException("inactive is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.Inactive = inactive;
            }
            // to ensure "canActivate" is required (not null)
            if (canActivate == null)
            {
                throw new InvalidDataException("canActivate is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.CanActivate = canActivate;
            }
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new InvalidDataException("subject is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.Subject = subject;
            }
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new InvalidDataException("content is a required property for InlineResponse2005Bounces and cannot be null");
            }
            else
            {
                this.Content = content;
            }
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets TypeCode
        /// </summary>
        [DataMember(Name="TypeCode", EmitDefaultValue=false)]
        public int? TypeCode { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name="Tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets MessageID
        /// </summary>
        [DataMember(Name="MessageID", EmitDefaultValue=false)]
        public string MessageID { get; set; }

        /// <summary>
        /// Gets or Sets ServerID
        /// </summary>
        [DataMember(Name="ServerID", EmitDefaultValue=false)]
        public string ServerID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="Details", EmitDefaultValue=false)]
        public string Details { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets BouncedAt
        /// </summary>
        [DataMember(Name="BouncedAt", EmitDefaultValue=false)]
        public string BouncedAt { get; set; }

        /// <summary>
        /// Gets or Sets DumpAvailable
        /// </summary>
        [DataMember(Name="DumpAvailable", EmitDefaultValue=false)]
        public bool? DumpAvailable { get; set; }

        /// <summary>
        /// Gets or Sets Inactive
        /// </summary>
        [DataMember(Name="Inactive", EmitDefaultValue=false)]
        public bool? Inactive { get; set; }

        /// <summary>
        /// Gets or Sets CanActivate
        /// </summary>
        [DataMember(Name="CanActivate", EmitDefaultValue=false)]
        public bool? CanActivate { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="Subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="Content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2005Bounces {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeCode: ").Append(TypeCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  MessageID: ").Append(MessageID).Append("\n");
            sb.Append("  ServerID: ").Append(ServerID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  BouncedAt: ").Append(BouncedAt).Append("\n");
            sb.Append("  DumpAvailable: ").Append(DumpAvailable).Append("\n");
            sb.Append("  Inactive: ").Append(Inactive).Append("\n");
            sb.Append("  CanActivate: ").Append(CanActivate).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2005Bounces);
        }

        /// <summary>
        /// Returns true if InlineResponse2005Bounces instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2005Bounces to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2005Bounces input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeCode == input.TypeCode ||
                    (this.TypeCode != null &&
                    this.TypeCode.Equals(input.TypeCode))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.MessageID == input.MessageID ||
                    (this.MessageID != null &&
                    this.MessageID.Equals(input.MessageID))
                ) && 
                (
                    this.ServerID == input.ServerID ||
                    (this.ServerID != null &&
                    this.ServerID.Equals(input.ServerID))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.BouncedAt == input.BouncedAt ||
                    (this.BouncedAt != null &&
                    this.BouncedAt.Equals(input.BouncedAt))
                ) && 
                (
                    this.DumpAvailable == input.DumpAvailable ||
                    (this.DumpAvailable != null &&
                    this.DumpAvailable.Equals(input.DumpAvailable))
                ) && 
                (
                    this.Inactive == input.Inactive ||
                    (this.Inactive != null &&
                    this.Inactive.Equals(input.Inactive))
                ) && 
                (
                    this.CanActivate == input.CanActivate ||
                    (this.CanActivate != null &&
                    this.CanActivate.Equals(input.CanActivate))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TypeCode != null)
                    hashCode = hashCode * 59 + this.TypeCode.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.MessageID != null)
                    hashCode = hashCode * 59 + this.MessageID.GetHashCode();
                if (this.ServerID != null)
                    hashCode = hashCode * 59 + this.ServerID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.BouncedAt != null)
                    hashCode = hashCode * 59 + this.BouncedAt.GetHashCode();
                if (this.DumpAvailable != null)
                    hashCode = hashCode * 59 + this.DumpAvailable.GetHashCode();
                if (this.Inactive != null)
                    hashCode = hashCode * 59 + this.Inactive.GetHashCode();
                if (this.CanActivate != null)
                    hashCode = hashCode * 59 + this.CanActivate.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
