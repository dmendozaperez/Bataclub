/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20025
    /// </summary>
    [DataContract]
    public partial class InlineResponse20025 :  IEquatable<InlineResponse20025>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20025" /> class.
        /// </summary>
        /// <param name="days">days.</param>
        /// <param name="hardBounce">hardBounce.</param>
        /// <param name="sMTPApiError">sMTPApiError.</param>
        /// <param name="softBounce">softBounce.</param>
        /// <param name="transient">transient.</param>
        public InlineResponse20025(List<InlineResponse20025Days> days = default(List<InlineResponse20025Days>), int? hardBounce = default(int?), int? sMTPApiError = default(int?), int? softBounce = default(int?), int? transient = default(int?))
        {
            this.Days = days;
            this.HardBounce = hardBounce;
            this.SMTPApiError = sMTPApiError;
            this.SoftBounce = softBounce;
            this.Transient = transient;
        }
        
        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [DataMember(Name="Days", EmitDefaultValue=false)]
        public List<InlineResponse20025Days> Days { get; set; }

        /// <summary>
        /// Gets or Sets HardBounce
        /// </summary>
        [DataMember(Name="HardBounce", EmitDefaultValue=false)]
        public int? HardBounce { get; set; }

        /// <summary>
        /// Gets or Sets SMTPApiError
        /// </summary>
        [DataMember(Name="SMTPApiError", EmitDefaultValue=false)]
        public int? SMTPApiError { get; set; }

        /// <summary>
        /// Gets or Sets SoftBounce
        /// </summary>
        [DataMember(Name="SoftBounce", EmitDefaultValue=false)]
        public int? SoftBounce { get; set; }

        /// <summary>
        /// Gets or Sets Transient
        /// </summary>
        [DataMember(Name="Transient", EmitDefaultValue=false)]
        public int? Transient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20025 {\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  HardBounce: ").Append(HardBounce).Append("\n");
            sb.Append("  SMTPApiError: ").Append(SMTPApiError).Append("\n");
            sb.Append("  SoftBounce: ").Append(SoftBounce).Append("\n");
            sb.Append("  Transient: ").Append(Transient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20025);
        }

        /// <summary>
        /// Returns true if InlineResponse20025 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20025 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20025 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Days == input.Days ||
                    this.Days != null &&
                    this.Days.SequenceEqual(input.Days)
                ) && 
                (
                    this.HardBounce == input.HardBounce ||
                    (this.HardBounce != null &&
                    this.HardBounce.Equals(input.HardBounce))
                ) && 
                (
                    this.SMTPApiError == input.SMTPApiError ||
                    (this.SMTPApiError != null &&
                    this.SMTPApiError.Equals(input.SMTPApiError))
                ) && 
                (
                    this.SoftBounce == input.SoftBounce ||
                    (this.SoftBounce != null &&
                    this.SoftBounce.Equals(input.SoftBounce))
                ) && 
                (
                    this.Transient == input.Transient ||
                    (this.Transient != null &&
                    this.Transient.Equals(input.Transient))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Days != null)
                    hashCode = hashCode * 59 + this.Days.GetHashCode();
                if (this.HardBounce != null)
                    hashCode = hashCode * 59 + this.HardBounce.GetHashCode();
                if (this.SMTPApiError != null)
                    hashCode = hashCode * 59 + this.SMTPApiError.GetHashCode();
                if (this.SoftBounce != null)
                    hashCode = hashCode * 59 + this.SoftBounce.GetHashCode();
                if (this.Transient != null)
                    hashCode = hashCode * 59 + this.Transient.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
