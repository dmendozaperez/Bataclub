/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Email object
    /// </summary>
    [DataContract]
    public partial class BatchEmail :  IEquatable<BatchEmail>, IValidatableObject
    {
        /// <summary>
        /// Activate link tracking for links in the HTML or Text bodies of this email. Possible options None HtmlAndText HtmlOnly TextOnly.
        /// </summary>
        /// <value>Activate link tracking for links in the HTML or Text bodies of this email. Possible options None HtmlAndText HtmlOnly TextOnly.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TrackLinksEnum
        {
            
            /// <summary>
            /// Enum HtmlAndText for value: HtmlAndText
            /// </summary>
            [EnumMember(Value = "HtmlAndText")]
            HtmlAndText = 1,
            
            /// <summary>
            /// Enum HtmlOnly for value: HtmlOnly
            /// </summary>
            [EnumMember(Value = "HtmlOnly")]
            HtmlOnly = 2,
            
            /// <summary>
            /// Enum TextOnly for value: TextOnly
            /// </summary>
            [EnumMember(Value = "TextOnly")]
            TextOnly = 3
        }

        /// <summary>
        /// Activate link tracking for links in the HTML or Text bodies of this email. Possible options None HtmlAndText HtmlOnly TextOnly.
        /// </summary>
        /// <value>Activate link tracking for links in the HTML or Text bodies of this email. Possible options None HtmlAndText HtmlOnly TextOnly.</value>
        [DataMember(Name="TrackLinks", EmitDefaultValue=false)]
        public TrackLinksEnum? TrackLinks { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchEmail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchEmail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchEmail" /> class.
        /// </summary>
        /// <param name="from">The sender email address. Must have a registered and confirmed Sender Signature. (required).</param>
        /// <param name="to">Recipient email address. Multiple addresses are comma separated. (required).</param>
        /// <param name="cc">Cc recipient email address. Multiple addresses are comma separated..</param>
        /// <param name="bcc">Bcc recipient email address. Multiple addresses are comma separated..</param>
        /// <param name="subject">Email subject..</param>
        /// <param name="tag">Email tag that allows you to categorize outgoing emails and get detailed statistics..</param>
        /// <param name="htmlBody">If TextBody is not specified HTML email message.</param>
        /// <param name="textBody">If HtmlBody is not specified Plain text email message..</param>
        /// <param name="replyTo">Reply To override email address. Defaults to the Reply To set in the sender signature..</param>
        /// <param name="headers">List of custom headers to include..</param>
        /// <param name="trackOpens">Activate open tracking for this email..</param>
        /// <param name="trackLinks">Activate link tracking for links in the HTML or Text bodies of this email. Possible options None HtmlAndText HtmlOnly TextOnly..</param>
        /// <param name="attachments">List of attachments.</param>
        public BatchEmail(string from = default(string), string to = default(string), string cc = default(string), string bcc = default(string), string subject = default(string), string tag = default(string), string htmlBody = default(string), string textBody = default(string), string replyTo = default(string), string headers = default(string), bool? trackOpens = default(bool?), TrackLinksEnum? trackLinks = default(TrackLinksEnum?), List<> attachments = default(List<>))
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for BatchEmail and cannot be null");
            }
            else
            {
                this.From = from;
            }
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for BatchEmail and cannot be null");
            }
            else
            {
                this.To = to;
            }
            this.Cc = cc;
            this.Bcc = bcc;
            this.Subject = subject;
            this.Tag = tag;
            this.HtmlBody = htmlBody;
            this.TextBody = textBody;
            this.ReplyTo = replyTo;
            this.Headers = headers;
            this.TrackOpens = trackOpens;
            this.TrackLinks = trackLinks;
            this.Attachments = attachments;
        }
        
        /// <summary>
        /// The sender email address. Must have a registered and confirmed Sender Signature.
        /// </summary>
        /// <value>The sender email address. Must have a registered and confirmed Sender Signature.</value>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Recipient email address. Multiple addresses are comma separated.
        /// </summary>
        /// <value>Recipient email address. Multiple addresses are comma separated.</value>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// Cc recipient email address. Multiple addresses are comma separated.
        /// </summary>
        /// <value>Cc recipient email address. Multiple addresses are comma separated.</value>
        [DataMember(Name="Cc", EmitDefaultValue=false)]
        public string Cc { get; set; }

        /// <summary>
        /// Bcc recipient email address. Multiple addresses are comma separated.
        /// </summary>
        /// <value>Bcc recipient email address. Multiple addresses are comma separated.</value>
        [DataMember(Name="Bcc", EmitDefaultValue=false)]
        public string Bcc { get; set; }

        /// <summary>
        /// Email subject.
        /// </summary>
        /// <value>Email subject.</value>
        [DataMember(Name="Subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Email tag that allows you to categorize outgoing emails and get detailed statistics.
        /// </summary>
        /// <value>Email tag that allows you to categorize outgoing emails and get detailed statistics.</value>
        [DataMember(Name="Tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// If TextBody is not specified HTML email message
        /// </summary>
        /// <value>If TextBody is not specified HTML email message</value>
        [DataMember(Name="HtmlBody", EmitDefaultValue=false)]
        public string HtmlBody { get; set; }

        /// <summary>
        /// If HtmlBody is not specified Plain text email message.
        /// </summary>
        /// <value>If HtmlBody is not specified Plain text email message.</value>
        [DataMember(Name="TextBody", EmitDefaultValue=false)]
        public string TextBody { get; set; }

        /// <summary>
        /// Reply To override email address. Defaults to the Reply To set in the sender signature.
        /// </summary>
        /// <value>Reply To override email address. Defaults to the Reply To set in the sender signature.</value>
        [DataMember(Name="ReplyTo", EmitDefaultValue=false)]
        public string ReplyTo { get; set; }

        /// <summary>
        /// List of custom headers to include.
        /// </summary>
        /// <value>List of custom headers to include.</value>
        [DataMember(Name="Headers", EmitDefaultValue=false)]
        public string Headers { get; set; }

        /// <summary>
        /// Activate open tracking for this email.
        /// </summary>
        /// <value>Activate open tracking for this email.</value>
        [DataMember(Name="TrackOpens", EmitDefaultValue=false)]
        public bool? TrackOpens { get; set; }


        /// <summary>
        /// List of attachments
        /// </summary>
        /// <value>List of attachments</value>
        [DataMember(Name="Attachments", EmitDefaultValue=false)]
        public List<> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchEmail {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  HtmlBody: ").Append(HtmlBody).Append("\n");
            sb.Append("  TextBody: ").Append(TextBody).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  TrackOpens: ").Append(TrackOpens).Append("\n");
            sb.Append("  TrackLinks: ").Append(TrackLinks).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchEmail);
        }

        /// <summary>
        /// Returns true if BatchEmail instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchEmail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchEmail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Cc == input.Cc ||
                    (this.Cc != null &&
                    this.Cc.Equals(input.Cc))
                ) && 
                (
                    this.Bcc == input.Bcc ||
                    (this.Bcc != null &&
                    this.Bcc.Equals(input.Bcc))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.HtmlBody == input.HtmlBody ||
                    (this.HtmlBody != null &&
                    this.HtmlBody.Equals(input.HtmlBody))
                ) && 
                (
                    this.TextBody == input.TextBody ||
                    (this.TextBody != null &&
                    this.TextBody.Equals(input.TextBody))
                ) && 
                (
                    this.ReplyTo == input.ReplyTo ||
                    (this.ReplyTo != null &&
                    this.ReplyTo.Equals(input.ReplyTo))
                ) && 
                (
                    this.Headers == input.Headers ||
                    (this.Headers != null &&
                    this.Headers.Equals(input.Headers))
                ) && 
                (
                    this.TrackOpens == input.TrackOpens ||
                    (this.TrackOpens != null &&
                    this.TrackOpens.Equals(input.TrackOpens))
                ) && 
                (
                    this.TrackLinks == input.TrackLinks ||
                    (this.TrackLinks != null &&
                    this.TrackLinks.Equals(input.TrackLinks))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Cc != null)
                    hashCode = hashCode * 59 + this.Cc.GetHashCode();
                if (this.Bcc != null)
                    hashCode = hashCode * 59 + this.Bcc.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.HtmlBody != null)
                    hashCode = hashCode * 59 + this.HtmlBody.GetHashCode();
                if (this.TextBody != null)
                    hashCode = hashCode * 59 + this.TextBody.GetHashCode();
                if (this.ReplyTo != null)
                    hashCode = hashCode * 59 + this.ReplyTo.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                if (this.TrackOpens != null)
                    hashCode = hashCode * 59 + this.TrackOpens.GetHashCode();
                if (this.TrackLinks != null)
                    hashCode = hashCode * 59 + this.TrackLinks.GetHashCode();
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
