/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20014MessageEvents
    /// </summary>
    [DataContract]
    public partial class InlineResponse20014MessageEvents :  IEquatable<InlineResponse20014MessageEvents>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20014MessageEvents" /> class.
        /// </summary>
        /// <param name="recipient">recipient.</param>
        /// <param name="type">type.</param>
        /// <param name="receivedAt">receivedAt.</param>
        /// <param name="details">details.</param>
        public InlineResponse20014MessageEvents(string recipient = default(string), string type = default(string), string receivedAt = default(string), List<InlineResponse20014Details> details = default(List<InlineResponse20014Details>))
        {
            this.Recipient = recipient;
            this.Type = type;
            this.ReceivedAt = receivedAt;
            this.Details = details;
        }
        
        /// <summary>
        /// Gets or Sets Recipient
        /// </summary>
        [DataMember(Name="Recipient", EmitDefaultValue=false)]
        public string Recipient { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedAt
        /// </summary>
        [DataMember(Name="ReceivedAt", EmitDefaultValue=false)]
        public string ReceivedAt { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="Details", EmitDefaultValue=false)]
        public List<InlineResponse20014Details> Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20014MessageEvents {\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ReceivedAt: ").Append(ReceivedAt).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20014MessageEvents);
        }

        /// <summary>
        /// Returns true if InlineResponse20014MessageEvents instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20014MessageEvents to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20014MessageEvents input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ReceivedAt == input.ReceivedAt ||
                    (this.ReceivedAt != null &&
                    this.ReceivedAt.Equals(input.ReceivedAt))
                ) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Recipient != null)
                    hashCode = hashCode * 59 + this.Recipient.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ReceivedAt != null)
                    hashCode = hashCode * 59 + this.ReceivedAt.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
