/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Send email with template
    /// </summary>
    [DataContract]
    public partial class SendTemplatedEmail :  IEquatable<SendTemplatedEmail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendTemplatedEmail" /> class.
        /// </summary>
        /// <param name="templateId">The template to use when sending this message. Required if TemplateAlias is not specified..</param>
        /// <param name="templateAlias">The alias of a template to use when sending this message. Required if TemplateID is not specified..</param>
        /// <param name="templateModel">The model to be applied to the specified template to generate HtmlBody, TextBody, and Subject..</param>
        /// <param name="inlineCss">By default, if the specified template contains an HTMLBody, we will apply the style blocks as inline attributes to the rendered HTML content. You may opt-out of this behavior by passing false for this request field..</param>
        /// <param name="from">The sender email address. Must have a registered and confirmed Sender Signature..</param>
        /// <param name="to">Recipient email address. Multiple addresses are comma separated. Max 50..</param>
        /// <param name="cc">Cc recipient email address. Multiple addresses are comma separated. Max 50..</param>
        /// <param name="bcc">Bcc recipient email address. Multiple addresses are comma separated. Max 50..</param>
        /// <param name="tag">Email tag that allows you to categorize outgoing emails and get detailed statistics..</param>
        /// <param name="replyTo">Reply To override email address. Defaults to the Reply To set in the sender signature..</param>
        /// <param name="headers">List of custom headers to include..</param>
        /// <param name="trackOpens">Activate open tracking for this email..</param>
        /// <param name="trackLinks">Activate link tracking for links in the HTML or Text bodies of this email. Possible (None, HtmlAndText, HtmlOnly, TextOnly).</param>
        /// <param name="attachments">List of attachments..</param>
        public SendTemplatedEmail(int? templateId = default(int?), string templateAlias = default(string), Object templateModel = default(Object), bool? inlineCss = default(bool?), string from = default(string), string to = default(string), string cc = default(string), string bcc = default(string), string tag = default(string), string replyTo = default(string), string headers = default(string), bool? trackOpens = default(bool?), string trackLinks = default(string), List<> attachments = default(List<>))
        {
            this.TemplateId = templateId;
            this.TemplateAlias = templateAlias;
            this.TemplateModel = templateModel;
            this.InlineCss = inlineCss;
            this.From = from;
            this.To = to;
            this.Cc = cc;
            this.Bcc = bcc;
            this.Tag = tag;
            this.ReplyTo = replyTo;
            this.Headers = headers;
            this.TrackOpens = trackOpens;
            this.TrackLinks = trackLinks;
            this.Attachments = attachments;
        }
        
        /// <summary>
        /// The template to use when sending this message. Required if TemplateAlias is not specified.
        /// </summary>
        /// <value>The template to use when sending this message. Required if TemplateAlias is not specified.</value>
        [DataMember(Name="TemplateId", EmitDefaultValue=false)]
        public int? TemplateId { get; set; }

        /// <summary>
        /// The alias of a template to use when sending this message. Required if TemplateID is not specified.
        /// </summary>
        /// <value>The alias of a template to use when sending this message. Required if TemplateID is not specified.</value>
        [DataMember(Name="TemplateAlias", EmitDefaultValue=false)]
        public string TemplateAlias { get; set; }

        /// <summary>
        /// The model to be applied to the specified template to generate HtmlBody, TextBody, and Subject.
        /// </summary>
        /// <value>The model to be applied to the specified template to generate HtmlBody, TextBody, and Subject.</value>
        [DataMember(Name="TemplateModel", EmitDefaultValue=false)]
        public Object TemplateModel { get; set; }

        /// <summary>
        /// By default, if the specified template contains an HTMLBody, we will apply the style blocks as inline attributes to the rendered HTML content. You may opt-out of this behavior by passing false for this request field.
        /// </summary>
        /// <value>By default, if the specified template contains an HTMLBody, we will apply the style blocks as inline attributes to the rendered HTML content. You may opt-out of this behavior by passing false for this request field.</value>
        [DataMember(Name="InlineCss", EmitDefaultValue=false)]
        public bool? InlineCss { get; set; }

        /// <summary>
        /// The sender email address. Must have a registered and confirmed Sender Signature.
        /// </summary>
        /// <value>The sender email address. Must have a registered and confirmed Sender Signature.</value>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Recipient email address. Multiple addresses are comma separated. Max 50.
        /// </summary>
        /// <value>Recipient email address. Multiple addresses are comma separated. Max 50.</value>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// Cc recipient email address. Multiple addresses are comma separated. Max 50.
        /// </summary>
        /// <value>Cc recipient email address. Multiple addresses are comma separated. Max 50.</value>
        [DataMember(Name="Cc", EmitDefaultValue=false)]
        public string Cc { get; set; }

        /// <summary>
        /// Bcc recipient email address. Multiple addresses are comma separated. Max 50.
        /// </summary>
        /// <value>Bcc recipient email address. Multiple addresses are comma separated. Max 50.</value>
        [DataMember(Name="Bcc", EmitDefaultValue=false)]
        public string Bcc { get; set; }

        /// <summary>
        /// Email tag that allows you to categorize outgoing emails and get detailed statistics.
        /// </summary>
        /// <value>Email tag that allows you to categorize outgoing emails and get detailed statistics.</value>
        [DataMember(Name="Tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Reply To override email address. Defaults to the Reply To set in the sender signature.
        /// </summary>
        /// <value>Reply To override email address. Defaults to the Reply To set in the sender signature.</value>
        [DataMember(Name="ReplyTo", EmitDefaultValue=false)]
        public string ReplyTo { get; set; }

        /// <summary>
        /// List of custom headers to include.
        /// </summary>
        /// <value>List of custom headers to include.</value>
        [DataMember(Name="Headers", EmitDefaultValue=false)]
        public string Headers { get; set; }

        /// <summary>
        /// Activate open tracking for this email.
        /// </summary>
        /// <value>Activate open tracking for this email.</value>
        [DataMember(Name="TrackOpens", EmitDefaultValue=false)]
        public bool? TrackOpens { get; set; }

        /// <summary>
        /// Activate link tracking for links in the HTML or Text bodies of this email. Possible (None, HtmlAndText, HtmlOnly, TextOnly)
        /// </summary>
        /// <value>Activate link tracking for links in the HTML or Text bodies of this email. Possible (None, HtmlAndText, HtmlOnly, TextOnly)</value>
        [DataMember(Name="TrackLinks", EmitDefaultValue=false)]
        public string TrackLinks { get; set; }

        /// <summary>
        /// List of attachments.
        /// </summary>
        /// <value>List of attachments.</value>
        [DataMember(Name="Attachments", EmitDefaultValue=false)]
        public List<> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendTemplatedEmail {\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  TemplateAlias: ").Append(TemplateAlias).Append("\n");
            sb.Append("  TemplateModel: ").Append(TemplateModel).Append("\n");
            sb.Append("  InlineCss: ").Append(InlineCss).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  TrackOpens: ").Append(TrackOpens).Append("\n");
            sb.Append("  TrackLinks: ").Append(TrackLinks).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendTemplatedEmail);
        }

        /// <summary>
        /// Returns true if SendTemplatedEmail instances are equal
        /// </summary>
        /// <param name="input">Instance of SendTemplatedEmail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendTemplatedEmail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.TemplateAlias == input.TemplateAlias ||
                    (this.TemplateAlias != null &&
                    this.TemplateAlias.Equals(input.TemplateAlias))
                ) && 
                (
                    this.TemplateModel == input.TemplateModel ||
                    (this.TemplateModel != null &&
                    this.TemplateModel.Equals(input.TemplateModel))
                ) && 
                (
                    this.InlineCss == input.InlineCss ||
                    (this.InlineCss != null &&
                    this.InlineCss.Equals(input.InlineCss))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Cc == input.Cc ||
                    (this.Cc != null &&
                    this.Cc.Equals(input.Cc))
                ) && 
                (
                    this.Bcc == input.Bcc ||
                    (this.Bcc != null &&
                    this.Bcc.Equals(input.Bcc))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.ReplyTo == input.ReplyTo ||
                    (this.ReplyTo != null &&
                    this.ReplyTo.Equals(input.ReplyTo))
                ) && 
                (
                    this.Headers == input.Headers ||
                    (this.Headers != null &&
                    this.Headers.Equals(input.Headers))
                ) && 
                (
                    this.TrackOpens == input.TrackOpens ||
                    (this.TrackOpens != null &&
                    this.TrackOpens.Equals(input.TrackOpens))
                ) && 
                (
                    this.TrackLinks == input.TrackLinks ||
                    (this.TrackLinks != null &&
                    this.TrackLinks.Equals(input.TrackLinks))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.TemplateAlias != null)
                    hashCode = hashCode * 59 + this.TemplateAlias.GetHashCode();
                if (this.TemplateModel != null)
                    hashCode = hashCode * 59 + this.TemplateModel.GetHashCode();
                if (this.InlineCss != null)
                    hashCode = hashCode * 59 + this.InlineCss.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Cc != null)
                    hashCode = hashCode * 59 + this.Cc.GetHashCode();
                if (this.Bcc != null)
                    hashCode = hashCode * 59 + this.Bcc.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.ReplyTo != null)
                    hashCode = hashCode * 59 + this.ReplyTo.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                if (this.TrackOpens != null)
                    hashCode = hashCode * 59 + this.TrackOpens.GetHashCode();
                if (this.TrackLinks != null)
                    hashCode = hashCode * 59 + this.TrackLinks.GetHashCode();
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
