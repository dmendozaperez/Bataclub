/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20011
    /// </summary>
    [DataContract]
    public partial class InlineResponse20011 :  IEquatable<InlineResponse20011>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20011" /> class.
        /// </summary>
        /// <param name="allContentIsValid">allContentIsValid.</param>
        /// <param name="htmlBody">htmlBody.</param>
        /// <param name="subject">subject.</param>
        /// <param name="suggestedTemplateModel">suggestedTemplateModel.</param>
        /// <param name="textBody">textBody.</param>
        public InlineResponse20011(bool? allContentIsValid = default(bool?), List<InlineResponse20011HtmlBody> htmlBody = default(List<InlineResponse20011HtmlBody>), List<InlineResponse20011Subject> subject = default(List<InlineResponse20011Subject>), List<InlineResponse20011SuggestedTemplateModel> suggestedTemplateModel = default(List<InlineResponse20011SuggestedTemplateModel>), List<InlineResponse20011TextBody> textBody = default(List<InlineResponse20011TextBody>))
        {
            this.AllContentIsValid = allContentIsValid;
            this.HtmlBody = htmlBody;
            this.Subject = subject;
            this.SuggestedTemplateModel = suggestedTemplateModel;
            this.TextBody = textBody;
        }
        
        /// <summary>
        /// Gets or Sets AllContentIsValid
        /// </summary>
        [DataMember(Name="AllContentIsValid", EmitDefaultValue=false)]
        public bool? AllContentIsValid { get; set; }

        /// <summary>
        /// Gets or Sets HtmlBody
        /// </summary>
        [DataMember(Name="HtmlBody", EmitDefaultValue=false)]
        public List<InlineResponse20011HtmlBody> HtmlBody { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="Subject", EmitDefaultValue=false)]
        public List<InlineResponse20011Subject> Subject { get; set; }

        /// <summary>
        /// Gets or Sets SuggestedTemplateModel
        /// </summary>
        [DataMember(Name="SuggestedTemplateModel", EmitDefaultValue=false)]
        public List<InlineResponse20011SuggestedTemplateModel> SuggestedTemplateModel { get; set; }

        /// <summary>
        /// Gets or Sets TextBody
        /// </summary>
        [DataMember(Name="TextBody", EmitDefaultValue=false)]
        public List<InlineResponse20011TextBody> TextBody { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20011 {\n");
            sb.Append("  AllContentIsValid: ").Append(AllContentIsValid).Append("\n");
            sb.Append("  HtmlBody: ").Append(HtmlBody).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  SuggestedTemplateModel: ").Append(SuggestedTemplateModel).Append("\n");
            sb.Append("  TextBody: ").Append(TextBody).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20011);
        }

        /// <summary>
        /// Returns true if InlineResponse20011 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20011 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20011 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllContentIsValid == input.AllContentIsValid ||
                    (this.AllContentIsValid != null &&
                    this.AllContentIsValid.Equals(input.AllContentIsValid))
                ) && 
                (
                    this.HtmlBody == input.HtmlBody ||
                    this.HtmlBody != null &&
                    this.HtmlBody.SequenceEqual(input.HtmlBody)
                ) && 
                (
                    this.Subject == input.Subject ||
                    this.Subject != null &&
                    this.Subject.SequenceEqual(input.Subject)
                ) && 
                (
                    this.SuggestedTemplateModel == input.SuggestedTemplateModel ||
                    this.SuggestedTemplateModel != null &&
                    this.SuggestedTemplateModel.SequenceEqual(input.SuggestedTemplateModel)
                ) && 
                (
                    this.TextBody == input.TextBody ||
                    this.TextBody != null &&
                    this.TextBody.SequenceEqual(input.TextBody)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllContentIsValid != null)
                    hashCode = hashCode * 59 + this.AllContentIsValid.GetHashCode();
                if (this.HtmlBody != null)
                    hashCode = hashCode * 59 + this.HtmlBody.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.SuggestedTemplateModel != null)
                    hashCode = hashCode * 59 + this.SuggestedTemplateModel.GetHashCode();
                if (this.TextBody != null)
                    hashCode = hashCode * 59 + this.TextBody.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
