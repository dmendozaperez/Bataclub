/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Create a template
    /// </summary>
    [DataContract]
    public partial class CreateTemplate :  IEquatable<CreateTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTemplate" /> class.
        /// </summary>
        /// <param name="name">Name of template..</param>
        /// <param name="subject">The content to use for the Subject when this template is used to send email. See our &lt;a href&#x3D;\&quot;http://support.postmarkapp.com/article/1077-template-syntax\&quot;&gt;template language documentation&lt;/a&gt; for more information on the syntax for this field..</param>
        /// <param name="textBody">The content to use for the HtmlBody when this template is used to send email. Required if TextBody is not specified. See our &lt;a href&#x3D;\&quot;http://support.postmarkapp.com/article/1077-template-syntax\&quot;&gt;template language documentation&lt;/a&gt; for more information on the syntax for this field..</param>
        /// <param name="htmlBody">The content to use for the TextBody when this template is used to send email. Required if HtmlBody is not specified. See our &lt;a href&#x3D;\&quot;http://support.postmarkapp.com/article/1077-template-syntax\&quot;&gt;template language documentation&lt;/a&gt; for more information on the syntax for this field..</param>
        /// <param name="alias">An optional string you can provide to identify this Template. Allowed characters are numbers, ASCII letters, and ‘.’, ‘-’, ‘_’ characters, and the string has to start with a letter..</param>
        public CreateTemplate(string name = default(string), string subject = default(string), string textBody = default(string), string htmlBody = default(string), string alias = default(string))
        {
            this.Name = name;
            this.Subject = subject;
            this.TextBody = textBody;
            this.HtmlBody = htmlBody;
            this.Alias = alias;
        }
        
        /// <summary>
        /// Name of template.
        /// </summary>
        /// <value>Name of template.</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The content to use for the Subject when this template is used to send email. See our &lt;a href&#x3D;\&quot;http://support.postmarkapp.com/article/1077-template-syntax\&quot;&gt;template language documentation&lt;/a&gt; for more information on the syntax for this field.
        /// </summary>
        /// <value>The content to use for the Subject when this template is used to send email. See our &lt;a href&#x3D;\&quot;http://support.postmarkapp.com/article/1077-template-syntax\&quot;&gt;template language documentation&lt;/a&gt; for more information on the syntax for this field.</value>
        [DataMember(Name="Subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// The content to use for the HtmlBody when this template is used to send email. Required if TextBody is not specified. See our &lt;a href&#x3D;\&quot;http://support.postmarkapp.com/article/1077-template-syntax\&quot;&gt;template language documentation&lt;/a&gt; for more information on the syntax for this field.
        /// </summary>
        /// <value>The content to use for the HtmlBody when this template is used to send email. Required if TextBody is not specified. See our &lt;a href&#x3D;\&quot;http://support.postmarkapp.com/article/1077-template-syntax\&quot;&gt;template language documentation&lt;/a&gt; for more information on the syntax for this field.</value>
        [DataMember(Name="TextBody", EmitDefaultValue=false)]
        public string TextBody { get; set; }

        /// <summary>
        /// The content to use for the TextBody when this template is used to send email. Required if HtmlBody is not specified. See our &lt;a href&#x3D;\&quot;http://support.postmarkapp.com/article/1077-template-syntax\&quot;&gt;template language documentation&lt;/a&gt; for more information on the syntax for this field.
        /// </summary>
        /// <value>The content to use for the TextBody when this template is used to send email. Required if HtmlBody is not specified. See our &lt;a href&#x3D;\&quot;http://support.postmarkapp.com/article/1077-template-syntax\&quot;&gt;template language documentation&lt;/a&gt; for more information on the syntax for this field.</value>
        [DataMember(Name="HtmlBody", EmitDefaultValue=false)]
        public string HtmlBody { get; set; }

        /// <summary>
        /// An optional string you can provide to identify this Template. Allowed characters are numbers, ASCII letters, and ‘.’, ‘-’, ‘_’ characters, and the string has to start with a letter.
        /// </summary>
        /// <value>An optional string you can provide to identify this Template. Allowed characters are numbers, ASCII letters, and ‘.’, ‘-’, ‘_’ characters, and the string has to start with a letter.</value>
        [DataMember(Name="Alias", EmitDefaultValue=false)]
        public string Alias { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateTemplate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TextBody: ").Append(TextBody).Append("\n");
            sb.Append("  HtmlBody: ").Append(HtmlBody).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTemplate);
        }

        /// <summary>
        /// Returns true if CreateTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTemplate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.TextBody == input.TextBody ||
                    (this.TextBody != null &&
                    this.TextBody.Equals(input.TextBody))
                ) && 
                (
                    this.HtmlBody == input.HtmlBody ||
                    (this.HtmlBody != null &&
                    this.HtmlBody.Equals(input.HtmlBody))
                ) && 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.TextBody != null)
                    hashCode = hashCode * 59 + this.TextBody.GetHashCode();
                if (this.HtmlBody != null)
                    hashCode = hashCode * 59 + this.HtmlBody.GetHashCode();
                if (this.Alias != null)
                    hashCode = hashCode * 59 + this.Alias.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
