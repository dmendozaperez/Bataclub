/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20011SuggestedTemplateModel
    /// </summary>
    [DataContract]
    public partial class InlineResponse20011SuggestedTemplateModel :  IEquatable<InlineResponse20011SuggestedTemplateModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20011SuggestedTemplateModel" /> class.
        /// </summary>
        /// <param name="userName">userName.</param>
        /// <param name="company">company.</param>
        /// <param name="person">person.</param>
        /// <param name="subjectHeadline">subjectHeadline.</param>
        public InlineResponse20011SuggestedTemplateModel(string userName = default(string), List<InlineResponse20011Company> company = default(List<InlineResponse20011Company>), List<InlineResponse20011Person> person = default(List<InlineResponse20011Person>), string subjectHeadline = default(string))
        {
            this.UserName = userName;
            this.Company = company;
            this.Person = person;
            this.SubjectHeadline = subjectHeadline;
        }
        
        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public List<InlineResponse20011Company> Company { get; set; }

        /// <summary>
        /// Gets or Sets Person
        /// </summary>
        [DataMember(Name="person", EmitDefaultValue=false)]
        public List<InlineResponse20011Person> Person { get; set; }

        /// <summary>
        /// Gets or Sets SubjectHeadline
        /// </summary>
        [DataMember(Name="subjectHeadline", EmitDefaultValue=false)]
        public string SubjectHeadline { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20011SuggestedTemplateModel {\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  SubjectHeadline: ").Append(SubjectHeadline).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20011SuggestedTemplateModel);
        }

        /// <summary>
        /// Returns true if InlineResponse20011SuggestedTemplateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20011SuggestedTemplateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20011SuggestedTemplateModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                ) && 
                (
                    this.Company == input.Company ||
                    this.Company != null &&
                    this.Company.SequenceEqual(input.Company)
                ) && 
                (
                    this.Person == input.Person ||
                    this.Person != null &&
                    this.Person.SequenceEqual(input.Person)
                ) && 
                (
                    this.SubjectHeadline == input.SubjectHeadline ||
                    (this.SubjectHeadline != null &&
                    this.SubjectHeadline.Equals(input.SubjectHeadline))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.Person != null)
                    hashCode = hashCode * 59 + this.Person.GetHashCode();
                if (this.SubjectHeadline != null)
                    hashCode = hashCode * 59 + this.SubjectHeadline.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
