/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20014
    /// </summary>
    [DataContract]
    public partial class InlineResponse20014 :  IEquatable<InlineResponse20014>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20014" /> class.
        /// </summary>
        /// <param name="attachments">attachments.</param>
        /// <param name="bcc">bcc.</param>
        /// <param name="body">body.</param>
        /// <param name="cc">cc.</param>
        /// <param name="from">from.</param>
        /// <param name="htmlBody">htmlBody.</param>
        /// <param name="messageEvents">messageEvents.</param>
        /// <param name="messageID">messageID.</param>
        /// <param name="receivedAt">receivedAt.</param>
        /// <param name="recipients">recipients.</param>
        /// <param name="status">status.</param>
        /// <param name="subject">subject.</param>
        /// <param name="tag">tag.</param>
        /// <param name="textBody">textBody.</param>
        /// <param name="to">to.</param>
        /// <param name="trackLinks">trackLinks.</param>
        /// <param name="trackOpens">trackOpens.</param>
        public InlineResponse20014(List<Object> attachments = default(List<Object>), string bcc = default(string), string body = default(string), string cc = default(string), string from = default(string), string htmlBody = default(string), List<InlineResponse20014MessageEvents> messageEvents = default(List<InlineResponse20014MessageEvents>), string messageID = default(string), string receivedAt = default(string), List<Object> recipients = default(List<Object>), string status = default(string), string subject = default(string), string tag = default(string), string textBody = default(string), List<InlineResponse20013To> to = default(List<InlineResponse20013To>), string trackLinks = default(string), bool? trackOpens = default(bool?))
        {
            this.Attachments = attachments;
            this.Bcc = bcc;
            this.Body = body;
            this.Cc = cc;
            this.From = from;
            this.HtmlBody = htmlBody;
            this.MessageEvents = messageEvents;
            this.MessageID = messageID;
            this.ReceivedAt = receivedAt;
            this.Recipients = recipients;
            this.Status = status;
            this.Subject = subject;
            this.Tag = tag;
            this.TextBody = textBody;
            this.To = to;
            this.TrackLinks = trackLinks;
            this.TrackOpens = trackOpens;
        }
        
        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name="Attachments", EmitDefaultValue=false)]
        public List<Object> Attachments { get; set; }

        /// <summary>
        /// Gets or Sets Bcc
        /// </summary>
        [DataMember(Name="Bcc", EmitDefaultValue=false)]
        public string Bcc { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="Body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets Cc
        /// </summary>
        [DataMember(Name="Cc", EmitDefaultValue=false)]
        public string Cc { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets HtmlBody
        /// </summary>
        [DataMember(Name="HtmlBody", EmitDefaultValue=false)]
        public string HtmlBody { get; set; }

        /// <summary>
        /// Gets or Sets MessageEvents
        /// </summary>
        [DataMember(Name="MessageEvents", EmitDefaultValue=false)]
        public List<InlineResponse20014MessageEvents> MessageEvents { get; set; }

        /// <summary>
        /// Gets or Sets MessageID
        /// </summary>
        [DataMember(Name="MessageID", EmitDefaultValue=false)]
        public string MessageID { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedAt
        /// </summary>
        [DataMember(Name="ReceivedAt", EmitDefaultValue=false)]
        public string ReceivedAt { get; set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [DataMember(Name="Recipients", EmitDefaultValue=false)]
        public List<Object> Recipients { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="Subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name="Tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets TextBody
        /// </summary>
        [DataMember(Name="TextBody", EmitDefaultValue=false)]
        public string TextBody { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public List<InlineResponse20013To> To { get; set; }

        /// <summary>
        /// Gets or Sets TrackLinks
        /// </summary>
        [DataMember(Name="TrackLinks", EmitDefaultValue=false)]
        public string TrackLinks { get; set; }

        /// <summary>
        /// Gets or Sets TrackOpens
        /// </summary>
        [DataMember(Name="TrackOpens", EmitDefaultValue=false)]
        public bool? TrackOpens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20014 {\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  HtmlBody: ").Append(HtmlBody).Append("\n");
            sb.Append("  MessageEvents: ").Append(MessageEvents).Append("\n");
            sb.Append("  MessageID: ").Append(MessageID).Append("\n");
            sb.Append("  ReceivedAt: ").Append(ReceivedAt).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  TextBody: ").Append(TextBody).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  TrackLinks: ").Append(TrackLinks).Append("\n");
            sb.Append("  TrackOpens: ").Append(TrackOpens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20014);
        }

        /// <summary>
        /// Returns true if InlineResponse20014 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20014 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20014 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.Bcc == input.Bcc ||
                    (this.Bcc != null &&
                    this.Bcc.Equals(input.Bcc))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.Cc == input.Cc ||
                    (this.Cc != null &&
                    this.Cc.Equals(input.Cc))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.HtmlBody == input.HtmlBody ||
                    (this.HtmlBody != null &&
                    this.HtmlBody.Equals(input.HtmlBody))
                ) && 
                (
                    this.MessageEvents == input.MessageEvents ||
                    this.MessageEvents != null &&
                    this.MessageEvents.SequenceEqual(input.MessageEvents)
                ) && 
                (
                    this.MessageID == input.MessageID ||
                    (this.MessageID != null &&
                    this.MessageID.Equals(input.MessageID))
                ) && 
                (
                    this.ReceivedAt == input.ReceivedAt ||
                    (this.ReceivedAt != null &&
                    this.ReceivedAt.Equals(input.ReceivedAt))
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    this.Recipients != null &&
                    this.Recipients.SequenceEqual(input.Recipients)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.TextBody == input.TextBody ||
                    (this.TextBody != null &&
                    this.TextBody.Equals(input.TextBody))
                ) && 
                (
                    this.To == input.To ||
                    this.To != null &&
                    this.To.SequenceEqual(input.To)
                ) && 
                (
                    this.TrackLinks == input.TrackLinks ||
                    (this.TrackLinks != null &&
                    this.TrackLinks.Equals(input.TrackLinks))
                ) && 
                (
                    this.TrackOpens == input.TrackOpens ||
                    (this.TrackOpens != null &&
                    this.TrackOpens.Equals(input.TrackOpens))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                if (this.Bcc != null)
                    hashCode = hashCode * 59 + this.Bcc.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.Cc != null)
                    hashCode = hashCode * 59 + this.Cc.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.HtmlBody != null)
                    hashCode = hashCode * 59 + this.HtmlBody.GetHashCode();
                if (this.MessageEvents != null)
                    hashCode = hashCode * 59 + this.MessageEvents.GetHashCode();
                if (this.MessageID != null)
                    hashCode = hashCode * 59 + this.MessageID.GetHashCode();
                if (this.ReceivedAt != null)
                    hashCode = hashCode * 59 + this.ReceivedAt.GetHashCode();
                if (this.Recipients != null)
                    hashCode = hashCode * 59 + this.Recipients.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.TextBody != null)
                    hashCode = hashCode * 59 + this.TextBody.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.TrackLinks != null)
                    hashCode = hashCode * 59 + this.TrackLinks.GetHashCode();
                if (this.TrackOpens != null)
                    hashCode = hashCode * 59 + this.TrackOpens.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
