/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatsAPIApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get bounce counts (Gets total counts of emails you’ve sent out that have been returned as bounced.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20025</returns>
        InlineResponse20025 GetBounceCounts (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get bounce counts (Gets total counts of emails you’ve sent out that have been returned as bounced.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        ApiResponse<InlineResponse20025> GetBounceCountsWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get browser platform usage (Gets an overview of the browser platforms used to open your emails. This is only recorded when Link Tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20034</returns>
        InlineResponse20034 GetBrowserPlatformUsage (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get browser platform usage (Gets an overview of the browser platforms used to open your emails. This is only recorded when Link Tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        ApiResponse<InlineResponse20034> GetBrowserPlatformUsageWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get browser usage (Gets an overview of the browsers used to open links in your emails. This is only recorded when Link Tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20033</returns>
        InlineResponse20033 GetBrowserUsage (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get browser usage (Gets an overview of the browsers used to open links in your emails. This is only recorded when Link Tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        ApiResponse<InlineResponse20033> GetBrowserUsageWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get click counts (Gets total counts of unique links that were clicked.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20032</returns>
        InlineResponse20032 GetClickCounts (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get click counts (Gets total counts of unique links that were clicked.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        ApiResponse<InlineResponse20032> GetClickCountsWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get click location (Gets an overview of which part of the email links were clicked from (HTML or Text). This is only recorded when Link Tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20035</returns>
        InlineResponse20035 GetClickLocation (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get click location (Gets an overview of which part of the email links were clicked from (HTML or Text). This is only recorded when Link Tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        ApiResponse<InlineResponse20035> GetClickLocationWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get email client usage (Gets an overview of the email clients used to open your emails. This is only recorded when open tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20030</returns>
        InlineResponse20030 GetEmailClientUsage (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get email client usage (Gets an overview of the email clients used to open your emails. This is only recorded when open tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        ApiResponse<InlineResponse20030> GetEmailClientUsageWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get email open counts (Gets total counts of recipients who opened your emails. This is only recorded when open tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20028</returns>
        InlineResponse20028 GetEmailOpenCounts (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get email open counts (Gets total counts of recipients who opened your emails. This is only recorded when open tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        ApiResponse<InlineResponse20028> GetEmailOpenCountsWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get email platform usage (Gets an overview of the platforms used to open your emails. This is only recorded when open tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20029</returns>
        InlineResponse20029 GetEmailPlatformUsage (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get email platform usage (Gets an overview of the platforms used to open your emails. This is only recorded when open tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        ApiResponse<InlineResponse20029> GetEmailPlatformUsageWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get email read times (Gets the length of time that recipients read emails along with counts for each time. This is only recorded when open tracking is enabled for that email. Read time tracking stops at 20 seconds, so any read times above that will appear in the 20s+ field.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20031</returns>
        InlineResponse20031 GetEmailReadTimes (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get email read times (Gets the length of time that recipients read emails along with counts for each time. This is only recorded when open tracking is enabled for that email. Read time tracking stops at 20 seconds, so any read times above that will appear in the 20s+ field.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        ApiResponse<InlineResponse20031> GetEmailReadTimesWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get outbound overview (Gets a brief overview of statistics for all of your outbound email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20023</returns>
        InlineResponse20023 GetOutboundOverview (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get outbound overview (Gets a brief overview of statistics for all of your outbound email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        ApiResponse<InlineResponse20023> GetOutboundOverviewWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get sent counts (Gets a total count of emails you’ve sent out.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20024</returns>
        InlineResponse20024 GetSentCounts (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get sent counts (Gets a total count of emails you’ve sent out.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        ApiResponse<InlineResponse20024> GetSentCountsWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get spam complaints (Gets a total count of recipients who have marked your email as spam.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 GetSpamComplaints (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get spam complaints (Gets a total count of recipients who have marked your email as spam.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> GetSpamComplaintsWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get tracked email counts (Gets a total count of emails you’ve sent with open tracking or link tracking enabled.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 GetTrackedEmailCounts (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get tracked email counts (Gets a total count of emails you’ve sent with open tracking or link tracking enabled.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> GetTrackedEmailCountsWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get bounce counts (Gets total counts of emails you’ve sent out that have been returned as bounced.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20025</returns>
        System.Threading.Tasks.Task<InlineResponse20025> GetBounceCountsAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get bounce counts (Gets total counts of emails you’ve sent out that have been returned as bounced.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GetBounceCountsAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get browser platform usage (Gets an overview of the browser platforms used to open your emails. This is only recorded when Link Tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20034</returns>
        System.Threading.Tasks.Task<InlineResponse20034> GetBrowserPlatformUsageAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get browser platform usage (Gets an overview of the browser platforms used to open your emails. This is only recorded when Link Tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> GetBrowserPlatformUsageAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get browser usage (Gets an overview of the browsers used to open links in your emails. This is only recorded when Link Tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20033</returns>
        System.Threading.Tasks.Task<InlineResponse20033> GetBrowserUsageAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get browser usage (Gets an overview of the browsers used to open links in your emails. This is only recorded when Link Tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> GetBrowserUsageAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get click counts (Gets total counts of unique links that were clicked.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20032</returns>
        System.Threading.Tasks.Task<InlineResponse20032> GetClickCountsAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get click counts (Gets total counts of unique links that were clicked.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> GetClickCountsAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get click location (Gets an overview of which part of the email links were clicked from (HTML or Text). This is only recorded when Link Tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20035</returns>
        System.Threading.Tasks.Task<InlineResponse20035> GetClickLocationAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get click location (Gets an overview of which part of the email links were clicked from (HTML or Text). This is only recorded when Link Tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> GetClickLocationAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get email client usage (Gets an overview of the email clients used to open your emails. This is only recorded when open tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20030</returns>
        System.Threading.Tasks.Task<InlineResponse20030> GetEmailClientUsageAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get email client usage (Gets an overview of the email clients used to open your emails. This is only recorded when open tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> GetEmailClientUsageAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get email open counts (Gets total counts of recipients who opened your emails. This is only recorded when open tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20028</returns>
        System.Threading.Tasks.Task<InlineResponse20028> GetEmailOpenCountsAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get email open counts (Gets total counts of recipients who opened your emails. This is only recorded when open tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> GetEmailOpenCountsAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get email platform usage (Gets an overview of the platforms used to open your emails. This is only recorded when open tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20029</returns>
        System.Threading.Tasks.Task<InlineResponse20029> GetEmailPlatformUsageAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get email platform usage (Gets an overview of the platforms used to open your emails. This is only recorded when open tracking is enabled for that email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> GetEmailPlatformUsageAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get email read times (Gets the length of time that recipients read emails along with counts for each time. This is only recorded when open tracking is enabled for that email. Read time tracking stops at 20 seconds, so any read times above that will appear in the 20s+ field.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20031</returns>
        System.Threading.Tasks.Task<InlineResponse20031> GetEmailReadTimesAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get email read times (Gets the length of time that recipients read emails along with counts for each time. This is only recorded when open tracking is enabled for that email. Read time tracking stops at 20 seconds, so any read times above that will appear in the 20s+ field.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> GetEmailReadTimesAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get outbound overview (Gets a brief overview of statistics for all of your outbound email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20023</returns>
        System.Threading.Tasks.Task<InlineResponse20023> GetOutboundOverviewAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get outbound overview (Gets a brief overview of statistics for all of your outbound email.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> GetOutboundOverviewAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get sent counts (Gets a total count of emails you’ve sent out.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20024</returns>
        System.Threading.Tasks.Task<InlineResponse20024> GetSentCountsAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get sent counts (Gets a total count of emails you’ve sent out.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GetSentCountsAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get spam complaints (Gets a total count of recipients who have marked your email as spam.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> GetSpamComplaintsAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get spam complaints (Gets a total count of recipients who have marked your email as spam.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GetSpamComplaintsAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get tracked email counts (Gets a total count of emails you’ve sent with open tracking or link tracking enabled.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> GetTrackedEmailCountsAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get tracked email counts (Gets a total count of emails you’ve sent with open tracking or link tracking enabled.)
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GetTrackedEmailCountsAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatsAPIApi : IStatsAPIApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatsAPIApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatsAPIApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get bounce counts (Gets total counts of emails you’ve sent out that have been returned as bounced.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20025</returns>
        public InlineResponse20025 GetBounceCounts (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20025> localVarResponse = GetBounceCountsWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get bounce counts (Gets total counts of emails you’ve sent out that have been returned as bounced.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        public ApiResponse< InlineResponse20025 > GetBounceCountsWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetBounceCounts");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetBounceCounts");

            var localVarPath = "/stats/outbound/bounces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBounceCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20025) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
        }

        /// <summary>
        /// Get bounce counts (Gets total counts of emails you’ve sent out that have been returned as bounced.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20025</returns>
        public async System.Threading.Tasks.Task<InlineResponse20025> GetBounceCountsAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20025> localVarResponse = await GetBounceCountsAsyncWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get bounce counts (Gets total counts of emails you’ve sent out that have been returned as bounced.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GetBounceCountsAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetBounceCounts");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetBounceCounts");

            var localVarPath = "/stats/outbound/bounces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBounceCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20025) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
        }

        /// <summary>
        /// Get browser platform usage (Gets an overview of the browser platforms used to open your emails. This is only recorded when Link Tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20034</returns>
        public InlineResponse20034 GetBrowserPlatformUsage (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20034> localVarResponse = GetBrowserPlatformUsageWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get browser platform usage (Gets an overview of the browser platforms used to open your emails. This is only recorded when Link Tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20034</returns>
        public ApiResponse< InlineResponse20034 > GetBrowserPlatformUsageWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetBrowserPlatformUsage");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetBrowserPlatformUsage");

            var localVarPath = "/stats/outbound/clicks/platforms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrowserPlatformUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20034>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20034) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20034)));
        }

        /// <summary>
        /// Get browser platform usage (Gets an overview of the browser platforms used to open your emails. This is only recorded when Link Tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20034</returns>
        public async System.Threading.Tasks.Task<InlineResponse20034> GetBrowserPlatformUsageAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20034> localVarResponse = await GetBrowserPlatformUsageAsyncWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get browser platform usage (Gets an overview of the browser platforms used to open your emails. This is only recorded when Link Tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20034)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20034>> GetBrowserPlatformUsageAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetBrowserPlatformUsage");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetBrowserPlatformUsage");

            var localVarPath = "/stats/outbound/clicks/platforms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrowserPlatformUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20034>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20034) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20034)));
        }

        /// <summary>
        /// Get browser usage (Gets an overview of the browsers used to open links in your emails. This is only recorded when Link Tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20033</returns>
        public InlineResponse20033 GetBrowserUsage (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20033> localVarResponse = GetBrowserUsageWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get browser usage (Gets an overview of the browsers used to open links in your emails. This is only recorded when Link Tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20033</returns>
        public ApiResponse< InlineResponse20033 > GetBrowserUsageWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetBrowserUsage");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetBrowserUsage");

            var localVarPath = "/stats/outbound/clicks/browserfamilies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrowserUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20033>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20033) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20033)));
        }

        /// <summary>
        /// Get browser usage (Gets an overview of the browsers used to open links in your emails. This is only recorded when Link Tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20033</returns>
        public async System.Threading.Tasks.Task<InlineResponse20033> GetBrowserUsageAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20033> localVarResponse = await GetBrowserUsageAsyncWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get browser usage (Gets an overview of the browsers used to open links in your emails. This is only recorded when Link Tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20033)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20033>> GetBrowserUsageAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetBrowserUsage");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetBrowserUsage");

            var localVarPath = "/stats/outbound/clicks/browserfamilies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBrowserUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20033>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20033) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20033)));
        }

        /// <summary>
        /// Get click counts (Gets total counts of unique links that were clicked.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20032</returns>
        public InlineResponse20032 GetClickCounts (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20032> localVarResponse = GetClickCountsWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get click counts (Gets total counts of unique links that were clicked.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20032</returns>
        public ApiResponse< InlineResponse20032 > GetClickCountsWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetClickCounts");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetClickCounts");

            var localVarPath = "/stats/outbound/clicks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClickCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20032>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20032) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20032)));
        }

        /// <summary>
        /// Get click counts (Gets total counts of unique links that were clicked.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20032</returns>
        public async System.Threading.Tasks.Task<InlineResponse20032> GetClickCountsAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20032> localVarResponse = await GetClickCountsAsyncWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get click counts (Gets total counts of unique links that were clicked.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20032)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20032>> GetClickCountsAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetClickCounts");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetClickCounts");

            var localVarPath = "/stats/outbound/clicks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClickCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20032>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20032) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20032)));
        }

        /// <summary>
        /// Get click location (Gets an overview of which part of the email links were clicked from (HTML or Text). This is only recorded when Link Tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20035</returns>
        public InlineResponse20035 GetClickLocation (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20035> localVarResponse = GetClickLocationWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get click location (Gets an overview of which part of the email links were clicked from (HTML or Text). This is only recorded when Link Tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20035</returns>
        public ApiResponse< InlineResponse20035 > GetClickLocationWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetClickLocation");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetClickLocation");

            var localVarPath = "/stats/outbound/clicks/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClickLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20035>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20035) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20035)));
        }

        /// <summary>
        /// Get click location (Gets an overview of which part of the email links were clicked from (HTML or Text). This is only recorded when Link Tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20035</returns>
        public async System.Threading.Tasks.Task<InlineResponse20035> GetClickLocationAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20035> localVarResponse = await GetClickLocationAsyncWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get click location (Gets an overview of which part of the email links were clicked from (HTML or Text). This is only recorded when Link Tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20035)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20035>> GetClickLocationAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetClickLocation");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetClickLocation");

            var localVarPath = "/stats/outbound/clicks/location";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClickLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20035>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20035) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20035)));
        }

        /// <summary>
        /// Get email client usage (Gets an overview of the email clients used to open your emails. This is only recorded when open tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20030</returns>
        public InlineResponse20030 GetEmailClientUsage (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20030> localVarResponse = GetEmailClientUsageWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email client usage (Gets an overview of the email clients used to open your emails. This is only recorded when open tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        public ApiResponse< InlineResponse20030 > GetEmailClientUsageWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetEmailClientUsage");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetEmailClientUsage");

            var localVarPath = "/stats/outbound/opens/emailclients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailClientUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20030>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20030) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20030)));
        }

        /// <summary>
        /// Get email client usage (Gets an overview of the email clients used to open your emails. This is only recorded when open tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20030</returns>
        public async System.Threading.Tasks.Task<InlineResponse20030> GetEmailClientUsageAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20030> localVarResponse = await GetEmailClientUsageAsyncWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email client usage (Gets an overview of the email clients used to open your emails. This is only recorded when open tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> GetEmailClientUsageAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetEmailClientUsage");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetEmailClientUsage");

            var localVarPath = "/stats/outbound/opens/emailclients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailClientUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20030>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20030) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20030)));
        }

        /// <summary>
        /// Get email open counts (Gets total counts of recipients who opened your emails. This is only recorded when open tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20028</returns>
        public InlineResponse20028 GetEmailOpenCounts (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20028> localVarResponse = GetEmailOpenCountsWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email open counts (Gets total counts of recipients who opened your emails. This is only recorded when open tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        public ApiResponse< InlineResponse20028 > GetEmailOpenCountsWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetEmailOpenCounts");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetEmailOpenCounts");

            var localVarPath = "/stats/outbound/opens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailOpenCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20028) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        /// Get email open counts (Gets total counts of recipients who opened your emails. This is only recorded when open tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20028</returns>
        public async System.Threading.Tasks.Task<InlineResponse20028> GetEmailOpenCountsAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20028> localVarResponse = await GetEmailOpenCountsAsyncWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email open counts (Gets total counts of recipients who opened your emails. This is only recorded when open tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> GetEmailOpenCountsAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetEmailOpenCounts");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetEmailOpenCounts");

            var localVarPath = "/stats/outbound/opens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailOpenCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20028) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        /// Get email platform usage (Gets an overview of the platforms used to open your emails. This is only recorded when open tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20029</returns>
        public InlineResponse20029 GetEmailPlatformUsage (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20029> localVarResponse = GetEmailPlatformUsageWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email platform usage (Gets an overview of the platforms used to open your emails. This is only recorded when open tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        public ApiResponse< InlineResponse20029 > GetEmailPlatformUsageWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetEmailPlatformUsage");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetEmailPlatformUsage");

            var localVarPath = "/stats/outbound/opens/platforms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailPlatformUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20029) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
        }

        /// <summary>
        /// Get email platform usage (Gets an overview of the platforms used to open your emails. This is only recorded when open tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20029</returns>
        public async System.Threading.Tasks.Task<InlineResponse20029> GetEmailPlatformUsageAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20029> localVarResponse = await GetEmailPlatformUsageAsyncWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email platform usage (Gets an overview of the platforms used to open your emails. This is only recorded when open tracking is enabled for that email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> GetEmailPlatformUsageAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetEmailPlatformUsage");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetEmailPlatformUsage");

            var localVarPath = "/stats/outbound/opens/platforms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailPlatformUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20029) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
        }

        /// <summary>
        /// Get email read times (Gets the length of time that recipients read emails along with counts for each time. This is only recorded when open tracking is enabled for that email. Read time tracking stops at 20 seconds, so any read times above that will appear in the 20s+ field.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20031</returns>
        public InlineResponse20031 GetEmailReadTimes (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20031> localVarResponse = GetEmailReadTimesWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get email read times (Gets the length of time that recipients read emails along with counts for each time. This is only recorded when open tracking is enabled for that email. Read time tracking stops at 20 seconds, so any read times above that will appear in the 20s+ field.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        public ApiResponse< InlineResponse20031 > GetEmailReadTimesWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetEmailReadTimes");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetEmailReadTimes");

            var localVarPath = "/stats/outbound/opens/readtimes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailReadTimes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20031>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20031) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20031)));
        }

        /// <summary>
        /// Get email read times (Gets the length of time that recipients read emails along with counts for each time. This is only recorded when open tracking is enabled for that email. Read time tracking stops at 20 seconds, so any read times above that will appear in the 20s+ field.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20031</returns>
        public async System.Threading.Tasks.Task<InlineResponse20031> GetEmailReadTimesAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20031> localVarResponse = await GetEmailReadTimesAsyncWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get email read times (Gets the length of time that recipients read emails along with counts for each time. This is only recorded when open tracking is enabled for that email. Read time tracking stops at 20 seconds, so any read times above that will appear in the 20s+ field.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> GetEmailReadTimesAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetEmailReadTimes");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetEmailReadTimes");

            var localVarPath = "/stats/outbound/opens/readtimes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailReadTimes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20031>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20031) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20031)));
        }

        /// <summary>
        /// Get outbound overview (Gets a brief overview of statistics for all of your outbound email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20023</returns>
        public InlineResponse20023 GetOutboundOverview (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20023> localVarResponse = GetOutboundOverviewWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get outbound overview (Gets a brief overview of statistics for all of your outbound email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        public ApiResponse< InlineResponse20023 > GetOutboundOverviewWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetOutboundOverview");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetOutboundOverview");

            var localVarPath = "/stats/outbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundOverview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20023) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
        }

        /// <summary>
        /// Get outbound overview (Gets a brief overview of statistics for all of your outbound email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20023</returns>
        public async System.Threading.Tasks.Task<InlineResponse20023> GetOutboundOverviewAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20023> localVarResponse = await GetOutboundOverviewAsyncWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get outbound overview (Gets a brief overview of statistics for all of your outbound email.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> GetOutboundOverviewAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetOutboundOverview");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetOutboundOverview");

            var localVarPath = "/stats/outbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundOverview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20023) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
        }

        /// <summary>
        /// Get sent counts (Gets a total count of emails you’ve sent out.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20024</returns>
        public InlineResponse20024 GetSentCounts (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20024> localVarResponse = GetSentCountsWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get sent counts (Gets a total count of emails you’ve sent out.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        public ApiResponse< InlineResponse20024 > GetSentCountsWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetSentCounts");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetSentCounts");

            var localVarPath = "/stats/outbound/sends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSentCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20024) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        /// Get sent counts (Gets a total count of emails you’ve sent out.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20024</returns>
        public async System.Threading.Tasks.Task<InlineResponse20024> GetSentCountsAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20024> localVarResponse = await GetSentCountsAsyncWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get sent counts (Gets a total count of emails you’ve sent out.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GetSentCountsAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetSentCounts");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetSentCounts");

            var localVarPath = "/stats/outbound/sends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSentCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20024) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        /// Get spam complaints (Gets a total count of recipients who have marked your email as spam.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 GetSpamComplaints (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20026> localVarResponse = GetSpamComplaintsWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get spam complaints (Gets a total count of recipients who have marked your email as spam.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public ApiResponse< InlineResponse20026 > GetSpamComplaintsWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetSpamComplaints");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetSpamComplaints");

            var localVarPath = "/stats/outbound/spam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpamComplaints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20026) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        /// Get spam complaints (Gets a total count of recipients who have marked your email as spam.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> GetSpamComplaintsAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20026> localVarResponse = await GetSpamComplaintsAsyncWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get spam complaints (Gets a total count of recipients who have marked your email as spam.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GetSpamComplaintsAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetSpamComplaints");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetSpamComplaints");

            var localVarPath = "/stats/outbound/spam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpamComplaints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20026) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        /// Get tracked email counts (Gets a total count of emails you’ve sent with open tracking or link tracking enabled.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 GetTrackedEmailCounts (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20027> localVarResponse = GetTrackedEmailCountsWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get tracked email counts (Gets a total count of emails you’ve sent with open tracking or link tracking enabled.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public ApiResponse< InlineResponse20027 > GetTrackedEmailCountsWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetTrackedEmailCounts");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetTrackedEmailCounts");

            var localVarPath = "/stats/outbound/tracked";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrackedEmailCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20027>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20027) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20027)));
        }

        /// <summary>
        /// Get tracked email counts (Gets a total count of emails you’ve sent with open tracking or link tracking enabled.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027> GetTrackedEmailCountsAsync (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse20027> localVarResponse = await GetTrackedEmailCountsAsyncWithHttpInfo(accept, xTrxApiKey, tag, fromdate, todate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get tracked email counts (Gets a total count of emails you’ve sent with open tracking or link tracking enabled.) Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="fromdate">- Filter stats starting from the date specified (inclusive). e.g. 2014-01-01.  (optional)</param>
        /// <param name="todate">- Filter stats up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GetTrackedEmailCountsAsyncWithHttpInfo (string accept, string xTrxApiKey, string tag = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling StatsAPIApi->GetTrackedEmailCounts");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling StatsAPIApi->GetTrackedEmailCounts");

            var localVarPath = "/stats/outbound/tracked";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrackedEmailCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20027>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20027) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20027)));
        }

    }
}
