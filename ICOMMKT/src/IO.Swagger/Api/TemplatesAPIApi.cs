/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatesAPIApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Create a template</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 CreateTemplate (string accept, string xTrxApiKey, CreateTemplate body);

        /// <summary>
        /// Create a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Create a template</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> CreateTemplateWithHttpInfo (string accept, string xTrxApiKey, CreateTemplate body);
        /// <summary>
        /// Delete a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 DeleteTemplate (string accept, string xTrxApiKey, int? templateIdOrAlias);

        /// <summary>
        /// Delete a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> DeleteTemplateWithHttpInfo (string accept, string xTrxApiKey, int? templateIdOrAlias);
        /// <summary>
        /// Edit a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <param name="body">Edit a template</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 EditTemplate (string accept, string xTrxApiKey, int? templateIdOrAlias, EditTemplate body);

        /// <summary>
        /// Edit a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <param name="body">Edit a template</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> EditTemplateWithHttpInfo (string accept, string xTrxApiKey, int? templateIdOrAlias, EditTemplate body);
        /// <summary>
        /// List templates
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- The number of templates to return. </param>
        /// <param name="offset">- The number of templates to \&quot;skip\&quot; before returning results. </param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GetListTemplates (string accept, string xTrxApiKey, int? count, int? offset);

        /// <summary>
        /// List templates
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- The number of templates to return. </param>
        /// <param name="offset">- The number of templates to \&quot;skip\&quot; before returning results. </param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GetListTemplatesWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset);
        /// <summary>
        /// Get a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 GetTemplate (string accept, string xTrxApiKey, int? templateIdOrAlias);

        /// <summary>
        /// Get a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> GetTemplateWithHttpInfo (string accept, string xTrxApiKey, int? templateIdOrAlias);
        /// <summary>
        /// Send batch with templates
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">- application/json </param>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Send batch with templates</param>
        /// <returns>Object</returns>
        Object SendBatchTemplatedEmail (string contentType, string accept, string xTrxApiKey, SendBatchTemplatedEmail body);

        /// <summary>
        /// Send batch with templates
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">- application/json </param>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Send batch with templates</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SendBatchTemplatedEmailWithHttpInfo (string contentType, string accept, string xTrxApiKey, SendBatchTemplatedEmail body);
        /// <summary>
        /// Send email with template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Send email with template</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 SendTemplatedEmail (string accept, string xTrxApiKey, SendTemplatedEmail body);

        /// <summary>
        /// Send email with template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Send email with template</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> SendTemplatedEmailWithHttpInfo (string accept, string xTrxApiKey, SendTemplatedEmail body);
        /// <summary>
        /// Validate a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Validate a template</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 ValidateTemplate (string accept, string xTrxApiKey, ValidateTemplate body);

        /// <summary>
        /// Validate a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Validate a template</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> ValidateTemplateWithHttpInfo (string accept, string xTrxApiKey, ValidateTemplate body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Create a template</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> CreateTemplateAsync (string accept, string xTrxApiKey, CreateTemplate body);

        /// <summary>
        /// Create a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Create a template</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> CreateTemplateAsyncWithHttpInfo (string accept, string xTrxApiKey, CreateTemplate body);
        /// <summary>
        /// Delete a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> DeleteTemplateAsync (string accept, string xTrxApiKey, int? templateIdOrAlias);

        /// <summary>
        /// Delete a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> DeleteTemplateAsyncWithHttpInfo (string accept, string xTrxApiKey, int? templateIdOrAlias);
        /// <summary>
        /// Edit a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <param name="body">Edit a template</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> EditTemplateAsync (string accept, string xTrxApiKey, int? templateIdOrAlias, EditTemplate body);

        /// <summary>
        /// Edit a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <param name="body">Edit a template</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> EditTemplateAsyncWithHttpInfo (string accept, string xTrxApiKey, int? templateIdOrAlias, EditTemplate body);
        /// <summary>
        /// List templates
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- The number of templates to return. </param>
        /// <param name="offset">- The number of templates to \&quot;skip\&quot; before returning results. </param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GetListTemplatesAsync (string accept, string xTrxApiKey, int? count, int? offset);

        /// <summary>
        /// List templates
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- The number of templates to return. </param>
        /// <param name="offset">- The number of templates to \&quot;skip\&quot; before returning results. </param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetListTemplatesAsyncWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset);
        /// <summary>
        /// Get a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> GetTemplateAsync (string accept, string xTrxApiKey, int? templateIdOrAlias);

        /// <summary>
        /// Get a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetTemplateAsyncWithHttpInfo (string accept, string xTrxApiKey, int? templateIdOrAlias);
        /// <summary>
        /// Send batch with templates
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">- application/json </param>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Send batch with templates</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SendBatchTemplatedEmailAsync (string contentType, string accept, string xTrxApiKey, SendBatchTemplatedEmail body);

        /// <summary>
        /// Send batch with templates
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">- application/json </param>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Send batch with templates</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendBatchTemplatedEmailAsyncWithHttpInfo (string contentType, string accept, string xTrxApiKey, SendBatchTemplatedEmail body);
        /// <summary>
        /// Send email with template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Send email with template</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> SendTemplatedEmailAsync (string accept, string xTrxApiKey, SendTemplatedEmail body);

        /// <summary>
        /// Send email with template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Send email with template</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> SendTemplatedEmailAsyncWithHttpInfo (string accept, string xTrxApiKey, SendTemplatedEmail body);
        /// <summary>
        /// Validate a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Validate a template</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> ValidateTemplateAsync (string accept, string xTrxApiKey, ValidateTemplate body);

        /// <summary>
        /// Validate a template
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Validate a template</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ValidateTemplateAsyncWithHttpInfo (string accept, string xTrxApiKey, ValidateTemplate body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplatesAPIApi : ITemplatesAPIApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesAPIApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplatesAPIApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Create a template</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 CreateTemplate (string accept, string xTrxApiKey, CreateTemplate body)
        {
             ApiResponse<InlineResponse2008> localVarResponse = CreateTemplateWithHttpInfo(accept, xTrxApiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Create a template</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse< InlineResponse2008 > CreateTemplateWithHttpInfo (string accept, string xTrxApiKey, CreateTemplate body)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TemplatesAPIApi->CreateTemplate");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling TemplatesAPIApi->CreateTemplate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplatesAPIApi->CreateTemplate");

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// Create a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Create a template</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> CreateTemplateAsync (string accept, string xTrxApiKey, CreateTemplate body)
        {
             ApiResponse<InlineResponse2008> localVarResponse = await CreateTemplateAsyncWithHttpInfo(accept, xTrxApiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Create a template</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> CreateTemplateAsyncWithHttpInfo (string accept, string xTrxApiKey, CreateTemplate body)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TemplatesAPIApi->CreateTemplate");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling TemplatesAPIApi->CreateTemplate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplatesAPIApi->CreateTemplate");

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// Delete a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 DeleteTemplate (string accept, string xTrxApiKey, int? templateIdOrAlias)
        {
             ApiResponse<InlineResponse20010> localVarResponse = DeleteTemplateWithHttpInfo(accept, xTrxApiKey, templateIdOrAlias);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public ApiResponse< InlineResponse20010 > DeleteTemplateWithHttpInfo (string accept, string xTrxApiKey, int? templateIdOrAlias)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TemplatesAPIApi->DeleteTemplate");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling TemplatesAPIApi->DeleteTemplate");
            // verify the required parameter 'templateIdOrAlias' is set
            if (templateIdOrAlias == null)
                throw new ApiException(400, "Missing required parameter 'templateIdOrAlias' when calling TemplatesAPIApi->DeleteTemplate");

            var localVarPath = "/templates/{templateIdOrAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateIdOrAlias != null) localVarPathParams.Add("templateIdOrAlias", this.Configuration.ApiClient.ParameterToString(templateIdOrAlias)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20010) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        /// Delete a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> DeleteTemplateAsync (string accept, string xTrxApiKey, int? templateIdOrAlias)
        {
             ApiResponse<InlineResponse20010> localVarResponse = await DeleteTemplateAsyncWithHttpInfo(accept, xTrxApiKey, templateIdOrAlias);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> DeleteTemplateAsyncWithHttpInfo (string accept, string xTrxApiKey, int? templateIdOrAlias)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TemplatesAPIApi->DeleteTemplate");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling TemplatesAPIApi->DeleteTemplate");
            // verify the required parameter 'templateIdOrAlias' is set
            if (templateIdOrAlias == null)
                throw new ApiException(400, "Missing required parameter 'templateIdOrAlias' when calling TemplatesAPIApi->DeleteTemplate");

            var localVarPath = "/templates/{templateIdOrAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateIdOrAlias != null) localVarPathParams.Add("templateIdOrAlias", this.Configuration.ApiClient.ParameterToString(templateIdOrAlias)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20010) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        /// Edit a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <param name="body">Edit a template</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 EditTemplate (string accept, string xTrxApiKey, int? templateIdOrAlias, EditTemplate body)
        {
             ApiResponse<InlineResponse2008> localVarResponse = EditTemplateWithHttpInfo(accept, xTrxApiKey, templateIdOrAlias, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <param name="body">Edit a template</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse< InlineResponse2008 > EditTemplateWithHttpInfo (string accept, string xTrxApiKey, int? templateIdOrAlias, EditTemplate body)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TemplatesAPIApi->EditTemplate");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling TemplatesAPIApi->EditTemplate");
            // verify the required parameter 'templateIdOrAlias' is set
            if (templateIdOrAlias == null)
                throw new ApiException(400, "Missing required parameter 'templateIdOrAlias' when calling TemplatesAPIApi->EditTemplate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplatesAPIApi->EditTemplate");

            var localVarPath = "/templates/{templateIdOrAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateIdOrAlias != null) localVarPathParams.Add("templateIdOrAlias", this.Configuration.ApiClient.ParameterToString(templateIdOrAlias)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// Edit a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <param name="body">Edit a template</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> EditTemplateAsync (string accept, string xTrxApiKey, int? templateIdOrAlias, EditTemplate body)
        {
             ApiResponse<InlineResponse2008> localVarResponse = await EditTemplateAsyncWithHttpInfo(accept, xTrxApiKey, templateIdOrAlias, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <param name="body">Edit a template</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> EditTemplateAsyncWithHttpInfo (string accept, string xTrxApiKey, int? templateIdOrAlias, EditTemplate body)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TemplatesAPIApi->EditTemplate");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling TemplatesAPIApi->EditTemplate");
            // verify the required parameter 'templateIdOrAlias' is set
            if (templateIdOrAlias == null)
                throw new ApiException(400, "Missing required parameter 'templateIdOrAlias' when calling TemplatesAPIApi->EditTemplate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplatesAPIApi->EditTemplate");

            var localVarPath = "/templates/{templateIdOrAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateIdOrAlias != null) localVarPathParams.Add("templateIdOrAlias", this.Configuration.ApiClient.ParameterToString(templateIdOrAlias)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// List templates Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- The number of templates to return. </param>
        /// <param name="offset">- The number of templates to \&quot;skip\&quot; before returning results. </param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GetListTemplates (string accept, string xTrxApiKey, int? count, int? offset)
        {
             ApiResponse<InlineResponse2007> localVarResponse = GetListTemplatesWithHttpInfo(accept, xTrxApiKey, count, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List templates Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- The number of templates to return. </param>
        /// <param name="offset">- The number of templates to \&quot;skip\&quot; before returning results. </param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse< InlineResponse2007 > GetListTemplatesWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TemplatesAPIApi->GetListTemplates");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling TemplatesAPIApi->GetListTemplates");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling TemplatesAPIApi->GetListTemplates");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling TemplatesAPIApi->GetListTemplates");

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Offset", offset)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// List templates Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- The number of templates to return. </param>
        /// <param name="offset">- The number of templates to \&quot;skip\&quot; before returning results. </param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> GetListTemplatesAsync (string accept, string xTrxApiKey, int? count, int? offset)
        {
             ApiResponse<InlineResponse2007> localVarResponse = await GetListTemplatesAsyncWithHttpInfo(accept, xTrxApiKey, count, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List templates Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- The number of templates to return. </param>
        /// <param name="offset">- The number of templates to \&quot;skip\&quot; before returning results. </param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetListTemplatesAsyncWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TemplatesAPIApi->GetListTemplates");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling TemplatesAPIApi->GetListTemplates");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling TemplatesAPIApi->GetListTemplates");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling TemplatesAPIApi->GetListTemplates");

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Offset", offset)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Get a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 GetTemplate (string accept, string xTrxApiKey, int? templateIdOrAlias)
        {
             ApiResponse<InlineResponse2009> localVarResponse = GetTemplateWithHttpInfo(accept, xTrxApiKey, templateIdOrAlias);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse< InlineResponse2009 > GetTemplateWithHttpInfo (string accept, string xTrxApiKey, int? templateIdOrAlias)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TemplatesAPIApi->GetTemplate");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling TemplatesAPIApi->GetTemplate");
            // verify the required parameter 'templateIdOrAlias' is set
            if (templateIdOrAlias == null)
                throw new ApiException(400, "Missing required parameter 'templateIdOrAlias' when calling TemplatesAPIApi->GetTemplate");

            var localVarPath = "/templates/{templateIdOrAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateIdOrAlias != null) localVarPathParams.Add("templateIdOrAlias", this.Configuration.ApiClient.ParameterToString(templateIdOrAlias)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// Get a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> GetTemplateAsync (string accept, string xTrxApiKey, int? templateIdOrAlias)
        {
             ApiResponse<InlineResponse2009> localVarResponse = await GetTemplateAsyncWithHttpInfo(accept, xTrxApiKey, templateIdOrAlias);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="templateIdOrAlias"></param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetTemplateAsyncWithHttpInfo (string accept, string xTrxApiKey, int? templateIdOrAlias)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TemplatesAPIApi->GetTemplate");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling TemplatesAPIApi->GetTemplate");
            // verify the required parameter 'templateIdOrAlias' is set
            if (templateIdOrAlias == null)
                throw new ApiException(400, "Missing required parameter 'templateIdOrAlias' when calling TemplatesAPIApi->GetTemplate");

            var localVarPath = "/templates/{templateIdOrAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateIdOrAlias != null) localVarPathParams.Add("templateIdOrAlias", this.Configuration.ApiClient.ParameterToString(templateIdOrAlias)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// Send batch with templates Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">- application/json </param>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Send batch with templates</param>
        /// <returns>Object</returns>
        public Object SendBatchTemplatedEmail (string contentType, string accept, string xTrxApiKey, SendBatchTemplatedEmail body)
        {
             ApiResponse<Object> localVarResponse = SendBatchTemplatedEmailWithHttpInfo(contentType, accept, xTrxApiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send batch with templates Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">- application/json </param>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Send batch with templates</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SendBatchTemplatedEmailWithHttpInfo (string contentType, string accept, string xTrxApiKey, SendBatchTemplatedEmail body)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TemplatesAPIApi->SendBatchTemplatedEmail");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TemplatesAPIApi->SendBatchTemplatedEmail");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling TemplatesAPIApi->SendBatchTemplatedEmail");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplatesAPIApi->SendBatchTemplatedEmail");

            var localVarPath = "/email/batchWithTemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendBatchTemplatedEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Send batch with templates Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">- application/json </param>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Send batch with templates</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SendBatchTemplatedEmailAsync (string contentType, string accept, string xTrxApiKey, SendBatchTemplatedEmail body)
        {
             ApiResponse<Object> localVarResponse = await SendBatchTemplatedEmailAsyncWithHttpInfo(contentType, accept, xTrxApiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send batch with templates Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">- application/json </param>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Send batch with templates</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SendBatchTemplatedEmailAsyncWithHttpInfo (string contentType, string accept, string xTrxApiKey, SendBatchTemplatedEmail body)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TemplatesAPIApi->SendBatchTemplatedEmail");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TemplatesAPIApi->SendBatchTemplatedEmail");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling TemplatesAPIApi->SendBatchTemplatedEmail");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplatesAPIApi->SendBatchTemplatedEmail");

            var localVarPath = "/email/batchWithTemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendBatchTemplatedEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Send email with template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Send email with template</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 SendTemplatedEmail (string accept, string xTrxApiKey, SendTemplatedEmail body)
        {
             ApiResponse<InlineResponse20012> localVarResponse = SendTemplatedEmailWithHttpInfo(accept, xTrxApiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send email with template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Send email with template</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse< InlineResponse20012 > SendTemplatedEmailWithHttpInfo (string accept, string xTrxApiKey, SendTemplatedEmail body)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TemplatesAPIApi->SendTemplatedEmail");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling TemplatesAPIApi->SendTemplatedEmail");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplatesAPIApi->SendTemplatedEmail");

            var localVarPath = "/email/withTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendTemplatedEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        /// Send email with template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Send email with template</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> SendTemplatedEmailAsync (string accept, string xTrxApiKey, SendTemplatedEmail body)
        {
             ApiResponse<InlineResponse20012> localVarResponse = await SendTemplatedEmailAsyncWithHttpInfo(accept, xTrxApiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send email with template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Send email with template</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> SendTemplatedEmailAsyncWithHttpInfo (string accept, string xTrxApiKey, SendTemplatedEmail body)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TemplatesAPIApi->SendTemplatedEmail");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling TemplatesAPIApi->SendTemplatedEmail");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplatesAPIApi->SendTemplatedEmail");

            var localVarPath = "/email/withTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendTemplatedEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        /// Validate a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Validate a template</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 ValidateTemplate (string accept, string xTrxApiKey, ValidateTemplate body)
        {
             ApiResponse<InlineResponse20011> localVarResponse = ValidateTemplateWithHttpInfo(accept, xTrxApiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Validate a template</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse< InlineResponse20011 > ValidateTemplateWithHttpInfo (string accept, string xTrxApiKey, ValidateTemplate body)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TemplatesAPIApi->ValidateTemplate");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling TemplatesAPIApi->ValidateTemplate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplatesAPIApi->ValidateTemplate");

            var localVarPath = "/templates/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        /// Validate a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Validate a template</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> ValidateTemplateAsync (string accept, string xTrxApiKey, ValidateTemplate body)
        {
             ApiResponse<InlineResponse20011> localVarResponse = await ValidateTemplateAsyncWithHttpInfo(accept, xTrxApiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate a template Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="body">Validate a template</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ValidateTemplateAsyncWithHttpInfo (string accept, string xTrxApiKey, ValidateTemplate body)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TemplatesAPIApi->ValidateTemplate");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling TemplatesAPIApi->ValidateTemplate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplatesAPIApi->ValidateTemplate");

            var localVarPath = "/templates/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

    }
}
