/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBouncesAPIApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate a bounce
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">- application/json </param>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid"></param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 ActivateBounce (string contentType, string accept, string xTrxApiKey, int? bounceid);

        /// <summary>
        /// Activate a bounce
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">- application/json </param>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid"></param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> ActivateBounceWithHttpInfo (string contentType, string accept, string xTrxApiKey, int? bounceid);
        /// <summary>
        /// Get bounce dump
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid"></param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetBounceDump (string accept, string xTrxApiKey, int? bounceid);

        /// <summary>
        /// Get bounce dump
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid"></param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetBounceDumpWithHttpInfo (string accept, string xTrxApiKey, int? bounceid);
        /// <summary>
        /// Get a single bounce
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid">ID of the bounce </param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetBounceSingle (string accept, string xTrxApiKey, int? bounceid);

        /// <summary>
        /// Get a single bounce
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid">ID of the bounce </param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetBounceSingleWithHttpInfo (string accept, string xTrxApiKey, int? bounceid);
        /// <summary>
        /// Get bounces
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of bounces to return per request. Max 500. </param>
        /// <param name="offset">- Number of bounces to skip. </param>
        /// <param name="type">- Filter by type of bounce.  (optional)</param>
        /// <param name="inactive">- Filter by emails that were deactivated by ICOMMKT due to the bounce. Set to true or false. If this isn’t specified it will return both active and inactive.  (optional)</param>
        /// <param name="emailFilter">- Filter by email address.  (optional)</param>
        /// <param name="tag">- Filter by tag.  (optional)</param>
        /// <param name="messageID">- Filter by messageID.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.     (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetBounces (string accept, string xTrxApiKey, int? count, int? offset, string type = null, bool? inactive = null, string emailFilter = null, string tag = null, string messageID = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get bounces
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of bounces to return per request. Max 500. </param>
        /// <param name="offset">- Number of bounces to skip. </param>
        /// <param name="type">- Filter by type of bounce.  (optional)</param>
        /// <param name="inactive">- Filter by emails that were deactivated by ICOMMKT due to the bounce. Set to true or false. If this isn’t specified it will return both active and inactive.  (optional)</param>
        /// <param name="emailFilter">- Filter by email address.  (optional)</param>
        /// <param name="tag">- Filter by tag.  (optional)</param>
        /// <param name="messageID">- Filter by messageID.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.     (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetBouncesWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string type = null, bool? inactive = null, string emailFilter = null, string tag = null, string messageID = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get an array of tags that have generated bounces for a given server.
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 GetTags (string accept, string xTrxApiKey);

        /// <summary>
        /// Get an array of tags that have generated bounces for a given server.
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> GetTagsWithHttpInfo (string accept, string xTrxApiKey);
        /// <summary>
        /// Get delivery Status
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetdeliveryStatus (string accept, string xTrxApiKey);

        /// <summary>
        /// Get delivery Status
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetdeliveryStatusWithHttpInfo (string accept, string xTrxApiKey);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate a bounce
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">- application/json </param>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid"></param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> ActivateBounceAsync (string contentType, string accept, string xTrxApiKey, int? bounceid);

        /// <summary>
        /// Activate a bounce
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">- application/json </param>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid"></param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> ActivateBounceAsyncWithHttpInfo (string contentType, string accept, string xTrxApiKey, int? bounceid);
        /// <summary>
        /// Get bounce dump
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid"></param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetBounceDumpAsync (string accept, string xTrxApiKey, int? bounceid);

        /// <summary>
        /// Get bounce dump
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid"></param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetBounceDumpAsyncWithHttpInfo (string accept, string xTrxApiKey, int? bounceid);
        /// <summary>
        /// Get a single bounce
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid">ID of the bounce </param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetBounceSingleAsync (string accept, string xTrxApiKey, int? bounceid);

        /// <summary>
        /// Get a single bounce
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid">ID of the bounce </param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetBounceSingleAsyncWithHttpInfo (string accept, string xTrxApiKey, int? bounceid);
        /// <summary>
        /// Get bounces
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of bounces to return per request. Max 500. </param>
        /// <param name="offset">- Number of bounces to skip. </param>
        /// <param name="type">- Filter by type of bounce.  (optional)</param>
        /// <param name="inactive">- Filter by emails that were deactivated by ICOMMKT due to the bounce. Set to true or false. If this isn’t specified it will return both active and inactive.  (optional)</param>
        /// <param name="emailFilter">- Filter by email address.  (optional)</param>
        /// <param name="tag">- Filter by tag.  (optional)</param>
        /// <param name="messageID">- Filter by messageID.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.     (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetBouncesAsync (string accept, string xTrxApiKey, int? count, int? offset, string type = null, bool? inactive = null, string emailFilter = null, string tag = null, string messageID = null, string fromdate = null, string todate = null);

        /// <summary>
        /// Get bounces
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of bounces to return per request. Max 500. </param>
        /// <param name="offset">- Number of bounces to skip. </param>
        /// <param name="type">- Filter by type of bounce.  (optional)</param>
        /// <param name="inactive">- Filter by emails that were deactivated by ICOMMKT due to the bounce. Set to true or false. If this isn’t specified it will return both active and inactive.  (optional)</param>
        /// <param name="emailFilter">- Filter by email address.  (optional)</param>
        /// <param name="tag">- Filter by tag.  (optional)</param>
        /// <param name="messageID">- Filter by messageID.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.     (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetBouncesAsyncWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string type = null, bool? inactive = null, string emailFilter = null, string tag = null, string messageID = null, string fromdate = null, string todate = null);
        /// <summary>
        /// Get an array of tags that have generated bounces for a given server.
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> GetTagsAsync (string accept, string xTrxApiKey);

        /// <summary>
        /// Get an array of tags that have generated bounces for a given server.
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetTagsAsyncWithHttpInfo (string accept, string xTrxApiKey);
        /// <summary>
        /// Get delivery Status
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetdeliveryStatusAsync (string accept, string xTrxApiKey);

        /// <summary>
        /// Get delivery Status
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetdeliveryStatusAsyncWithHttpInfo (string accept, string xTrxApiKey);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BouncesAPIApi : IBouncesAPIApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BouncesAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BouncesAPIApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BouncesAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BouncesAPIApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activate a bounce Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">- application/json </param>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid"></param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 ActivateBounce (string contentType, string accept, string xTrxApiKey, int? bounceid)
        {
             ApiResponse<InlineResponse2005> localVarResponse = ActivateBounceWithHttpInfo(contentType, accept, xTrxApiKey, bounceid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activate a bounce Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">- application/json </param>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid"></param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse< InlineResponse2005 > ActivateBounceWithHttpInfo (string contentType, string accept, string xTrxApiKey, int? bounceid)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling BouncesAPIApi->ActivateBounce");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling BouncesAPIApi->ActivateBounce");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling BouncesAPIApi->ActivateBounce");
            // verify the required parameter 'bounceid' is set
            if (bounceid == null)
                throw new ApiException(400, "Missing required parameter 'bounceid' when calling BouncesAPIApi->ActivateBounce");

            var localVarPath = "/bounces/{bounceid}/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bounceid != null) localVarPathParams.Add("bounceid", this.Configuration.ApiClient.ParameterToString(bounceid)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateBounce", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Activate a bounce Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">- application/json </param>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid"></param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> ActivateBounceAsync (string contentType, string accept, string xTrxApiKey, int? bounceid)
        {
             ApiResponse<InlineResponse2005> localVarResponse = await ActivateBounceAsyncWithHttpInfo(contentType, accept, xTrxApiKey, bounceid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activate a bounce Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">- application/json </param>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid"></param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> ActivateBounceAsyncWithHttpInfo (string contentType, string accept, string xTrxApiKey, int? bounceid)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling BouncesAPIApi->ActivateBounce");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling BouncesAPIApi->ActivateBounce");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling BouncesAPIApi->ActivateBounce");
            // verify the required parameter 'bounceid' is set
            if (bounceid == null)
                throw new ApiException(400, "Missing required parameter 'bounceid' when calling BouncesAPIApi->ActivateBounce");

            var localVarPath = "/bounces/{bounceid}/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bounceid != null) localVarPathParams.Add("bounceid", this.Configuration.ApiClient.ParameterToString(bounceid)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateBounce", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Get bounce dump Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid"></param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetBounceDump (string accept, string xTrxApiKey, int? bounceid)
        {
             ApiResponse<InlineResponse2004> localVarResponse = GetBounceDumpWithHttpInfo(accept, xTrxApiKey, bounceid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get bounce dump Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid"></param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse< InlineResponse2004 > GetBounceDumpWithHttpInfo (string accept, string xTrxApiKey, int? bounceid)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling BouncesAPIApi->GetBounceDump");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling BouncesAPIApi->GetBounceDump");
            // verify the required parameter 'bounceid' is set
            if (bounceid == null)
                throw new ApiException(400, "Missing required parameter 'bounceid' when calling BouncesAPIApi->GetBounceDump");

            var localVarPath = "/bounces/{bounceid}/dump";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bounceid != null) localVarPathParams.Add("bounceid", this.Configuration.ApiClient.ParameterToString(bounceid)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBounceDump", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Get bounce dump Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid"></param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> GetBounceDumpAsync (string accept, string xTrxApiKey, int? bounceid)
        {
             ApiResponse<InlineResponse2004> localVarResponse = await GetBounceDumpAsyncWithHttpInfo(accept, xTrxApiKey, bounceid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get bounce dump Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid"></param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetBounceDumpAsyncWithHttpInfo (string accept, string xTrxApiKey, int? bounceid)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling BouncesAPIApi->GetBounceDump");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling BouncesAPIApi->GetBounceDump");
            // verify the required parameter 'bounceid' is set
            if (bounceid == null)
                throw new ApiException(400, "Missing required parameter 'bounceid' when calling BouncesAPIApi->GetBounceDump");

            var localVarPath = "/bounces/{bounceid}/dump";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bounceid != null) localVarPathParams.Add("bounceid", this.Configuration.ApiClient.ParameterToString(bounceid)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBounceDump", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Get a single bounce Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid">ID of the bounce </param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetBounceSingle (string accept, string xTrxApiKey, int? bounceid)
        {
             ApiResponse<InlineResponse2003> localVarResponse = GetBounceSingleWithHttpInfo(accept, xTrxApiKey, bounceid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single bounce Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid">ID of the bounce </param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > GetBounceSingleWithHttpInfo (string accept, string xTrxApiKey, int? bounceid)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling BouncesAPIApi->GetBounceSingle");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling BouncesAPIApi->GetBounceSingle");
            // verify the required parameter 'bounceid' is set
            if (bounceid == null)
                throw new ApiException(400, "Missing required parameter 'bounceid' when calling BouncesAPIApi->GetBounceSingle");

            var localVarPath = "/bounces/{bounceid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bounceid != null) localVarPathParams.Add("bounceid", this.Configuration.ApiClient.ParameterToString(bounceid)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBounceSingle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Get a single bounce Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid">ID of the bounce </param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GetBounceSingleAsync (string accept, string xTrxApiKey, int? bounceid)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await GetBounceSingleAsyncWithHttpInfo(accept, xTrxApiKey, bounceid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single bounce Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="bounceid">ID of the bounce </param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetBounceSingleAsyncWithHttpInfo (string accept, string xTrxApiKey, int? bounceid)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling BouncesAPIApi->GetBounceSingle");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling BouncesAPIApi->GetBounceSingle");
            // verify the required parameter 'bounceid' is set
            if (bounceid == null)
                throw new ApiException(400, "Missing required parameter 'bounceid' when calling BouncesAPIApi->GetBounceSingle");

            var localVarPath = "/bounces/{bounceid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bounceid != null) localVarPathParams.Add("bounceid", this.Configuration.ApiClient.ParameterToString(bounceid)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBounceSingle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Get bounces Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of bounces to return per request. Max 500. </param>
        /// <param name="offset">- Number of bounces to skip. </param>
        /// <param name="type">- Filter by type of bounce.  (optional)</param>
        /// <param name="inactive">- Filter by emails that were deactivated by ICOMMKT due to the bounce. Set to true or false. If this isn’t specified it will return both active and inactive.  (optional)</param>
        /// <param name="emailFilter">- Filter by email address.  (optional)</param>
        /// <param name="tag">- Filter by tag.  (optional)</param>
        /// <param name="messageID">- Filter by messageID.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.     (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetBounces (string accept, string xTrxApiKey, int? count, int? offset, string type = null, bool? inactive = null, string emailFilter = null, string tag = null, string messageID = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = GetBouncesWithHttpInfo(accept, xTrxApiKey, count, offset, type, inactive, emailFilter, tag, messageID, fromdate, todate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get bounces Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of bounces to return per request. Max 500. </param>
        /// <param name="offset">- Number of bounces to skip. </param>
        /// <param name="type">- Filter by type of bounce.  (optional)</param>
        /// <param name="inactive">- Filter by emails that were deactivated by ICOMMKT due to the bounce. Set to true or false. If this isn’t specified it will return both active and inactive.  (optional)</param>
        /// <param name="emailFilter">- Filter by email address.  (optional)</param>
        /// <param name="tag">- Filter by tag.  (optional)</param>
        /// <param name="messageID">- Filter by messageID.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.     (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > GetBouncesWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string type = null, bool? inactive = null, string emailFilter = null, string tag = null, string messageID = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling BouncesAPIApi->GetBounces");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling BouncesAPIApi->GetBounces");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling BouncesAPIApi->GetBounces");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling BouncesAPIApi->GetBounces");

            var localVarPath = "/bounces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter
            if (count != null) localVarFormParams.Add("count", this.Configuration.ApiClient.ParameterToString(count)); // form parameter
            if (offset != null) localVarFormParams.Add("offset", this.Configuration.ApiClient.ParameterToString(offset)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (inactive != null) localVarFormParams.Add("inactive", this.Configuration.ApiClient.ParameterToString(inactive)); // form parameter
            if (emailFilter != null) localVarFormParams.Add("emailFilter", this.Configuration.ApiClient.ParameterToString(emailFilter)); // form parameter
            if (tag != null) localVarFormParams.Add("tag", this.Configuration.ApiClient.ParameterToString(tag)); // form parameter
            if (messageID != null) localVarFormParams.Add("messageID", this.Configuration.ApiClient.ParameterToString(messageID)); // form parameter
            if (fromdate != null) localVarFormParams.Add("fromdate", this.Configuration.ApiClient.ParameterToString(fromdate)); // form parameter
            if (todate != null) localVarFormParams.Add("todate", this.Configuration.ApiClient.ParameterToString(todate)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBounces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Get bounces Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of bounces to return per request. Max 500. </param>
        /// <param name="offset">- Number of bounces to skip. </param>
        /// <param name="type">- Filter by type of bounce.  (optional)</param>
        /// <param name="inactive">- Filter by emails that were deactivated by ICOMMKT due to the bounce. Set to true or false. If this isn’t specified it will return both active and inactive.  (optional)</param>
        /// <param name="emailFilter">- Filter by email address.  (optional)</param>
        /// <param name="tag">- Filter by tag.  (optional)</param>
        /// <param name="messageID">- Filter by messageID.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.     (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GetBouncesAsync (string accept, string xTrxApiKey, int? count, int? offset, string type = null, bool? inactive = null, string emailFilter = null, string tag = null, string messageID = null, string fromdate = null, string todate = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await GetBouncesAsyncWithHttpInfo(accept, xTrxApiKey, count, offset, type, inactive, emailFilter, tag, messageID, fromdate, todate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get bounces Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of bounces to return per request. Max 500. </param>
        /// <param name="offset">- Number of bounces to skip. </param>
        /// <param name="type">- Filter by type of bounce.  (optional)</param>
        /// <param name="inactive">- Filter by emails that were deactivated by ICOMMKT due to the bounce. Set to true or false. If this isn’t specified it will return both active and inactive.  (optional)</param>
        /// <param name="emailFilter">- Filter by email address.  (optional)</param>
        /// <param name="tag">- Filter by tag.  (optional)</param>
        /// <param name="messageID">- Filter by messageID.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.     (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetBouncesAsyncWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string type = null, bool? inactive = null, string emailFilter = null, string tag = null, string messageID = null, string fromdate = null, string todate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling BouncesAPIApi->GetBounces");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling BouncesAPIApi->GetBounces");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling BouncesAPIApi->GetBounces");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling BouncesAPIApi->GetBounces");

            var localVarPath = "/bounces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter
            if (count != null) localVarFormParams.Add("count", this.Configuration.ApiClient.ParameterToString(count)); // form parameter
            if (offset != null) localVarFormParams.Add("offset", this.Configuration.ApiClient.ParameterToString(offset)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (inactive != null) localVarFormParams.Add("inactive", this.Configuration.ApiClient.ParameterToString(inactive)); // form parameter
            if (emailFilter != null) localVarFormParams.Add("emailFilter", this.Configuration.ApiClient.ParameterToString(emailFilter)); // form parameter
            if (tag != null) localVarFormParams.Add("tag", this.Configuration.ApiClient.ParameterToString(tag)); // form parameter
            if (messageID != null) localVarFormParams.Add("messageID", this.Configuration.ApiClient.ParameterToString(messageID)); // form parameter
            if (fromdate != null) localVarFormParams.Add("fromdate", this.Configuration.ApiClient.ParameterToString(fromdate)); // form parameter
            if (todate != null) localVarFormParams.Add("todate", this.Configuration.ApiClient.ParameterToString(todate)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBounces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Get an array of tags that have generated bounces for a given server. Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 GetTags (string accept, string xTrxApiKey)
        {
             ApiResponse<InlineResponse2006> localVarResponse = GetTagsWithHttpInfo(accept, xTrxApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an array of tags that have generated bounces for a given server. Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > GetTagsWithHttpInfo (string accept, string xTrxApiKey)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling BouncesAPIApi->GetTags");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling BouncesAPIApi->GetTags");

            var localVarPath = "/bounces/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Get an array of tags that have generated bounces for a given server. Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> GetTagsAsync (string accept, string xTrxApiKey)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await GetTagsAsyncWithHttpInfo(accept, xTrxApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an array of tags that have generated bounces for a given server. Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetTagsAsyncWithHttpInfo (string accept, string xTrxApiKey)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling BouncesAPIApi->GetTags");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling BouncesAPIApi->GetTags");

            var localVarPath = "/bounces/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Get delivery Status Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetdeliveryStatus (string accept, string xTrxApiKey)
        {
             ApiResponse<InlineResponse2002> localVarResponse = GetdeliveryStatusWithHttpInfo(accept, xTrxApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get delivery Status Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > GetdeliveryStatusWithHttpInfo (string accept, string xTrxApiKey)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling BouncesAPIApi->GetdeliveryStatus");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling BouncesAPIApi->GetdeliveryStatus");

            var localVarPath = "/deliverystats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetdeliveryStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Get delivery Status Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> GetdeliveryStatusAsync (string accept, string xTrxApiKey)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await GetdeliveryStatusAsyncWithHttpInfo(accept, xTrxApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get delivery Status Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetdeliveryStatusAsyncWithHttpInfo (string accept, string xTrxApiKey)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling BouncesAPIApi->GetdeliveryStatus");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling BouncesAPIApi->GetdeliveryStatus");

            var localVarPath = "/deliverystats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetdeliveryStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

    }
}
