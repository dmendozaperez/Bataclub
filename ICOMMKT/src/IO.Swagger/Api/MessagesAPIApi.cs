/* 
 * ICOMMKT Transactional API
 *
 * ICOMMKT Transactional API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagesAPIApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bypass rules for a blocked inbound message
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 BypassRulesForBlockedInboundMessage (string accept, string xTrxApiKey, int? messageid);

        /// <summary>
        /// Bypass rules for a blocked inbound message
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> BypassRulesForBlockedInboundMessageWithHttpInfo (string accept, string xTrxApiKey, int? messageid);
        /// <summary>
        /// Clicks for a single message
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 GetClicksForSingleMessage (string accept, string xTrxApiKey, int? messageid, int? count, int? offset);

        /// <summary>
        /// Clicks for a single message
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> GetClicksForSingleMessageWithHttpInfo (string accept, string xTrxApiKey, int? messageid, int? count, int? offset);
        /// <summary>
        /// Inbound message details
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 GetInboundMessageDetails (string accept, string xTrxApiKey, int? messageid);

        /// <summary>
        /// Inbound message details
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> GetInboundMessageDetailsWithHttpInfo (string accept, string xTrxApiKey, int? messageid);
        /// <summary>
        /// Inbound message search
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of records to return per request. Max 500. </param>
        /// <param name="offset">- Number of records to skip. </param>
        /// <param name="recipient">- Filter by the user who was receiving the email.  (optional)</param>
        /// <param name="fromemail">- Filter by the sender email address.  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="subject">- Filter by email subject.  (optional)</param>
        /// <param name="mailboxhash">- Filter by mailboxhash.  (optional)</param>
        /// <param name="status">- Filter by status (blocked, processed / sent, queued, failed, scheduled)  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 GetInboundMessageSearch (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string fromemail = null, string tag = null, string subject = null, string mailboxhash = null, string status = null, string todate = null, string fromdate = null);

        /// <summary>
        /// Inbound message search
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of records to return per request. Max 500. </param>
        /// <param name="offset">- Number of records to skip. </param>
        /// <param name="recipient">- Filter by the user who was receiving the email.  (optional)</param>
        /// <param name="fromemail">- Filter by the sender email address.  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="subject">- Filter by email subject.  (optional)</param>
        /// <param name="mailboxhash">- Filter by mailboxhash.  (optional)</param>
        /// <param name="status">- Filter by status (blocked, processed / sent, queued, failed, scheduled)  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> GetInboundMessageSearchWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string fromemail = null, string tag = null, string subject = null, string mailboxhash = null, string status = null, string todate = null, string fromdate = null);
        /// <summary>
        /// Message clicks
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <param name="recipient">- Filter by To, Cc, Bcc  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="clientName">- Filter by client name, i.e. Outlook, Gmail  (optional)</param>
        /// <param name="clientCompany">- Filter by company, i.e. Microsoft, Apple, Google  (optional)</param>
        /// <param name="clientFamily">- Filter by client family, i.e. OS X, Chrome  (optional)</param>
        /// <param name="osName">- Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7  (optional)</param>
        /// <param name="osFamily">- Filter by kind of OS used without specific version, i.e. OS X, Windows  (optional)</param>
        /// <param name="osCompany">- Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation  (optional)</param>
        /// <param name="platform">- Filter by platform, i.e. webmail, desktop, mobile  (optional)</param>
        /// <param name="country">- Filter by country messages were opened in, i.e. Denmark, Russia  (optional)</param>
        /// <param name="region">- Filter by full name of region messages were opened in, i.e. Moscow, New York  (optional)</param>
        /// <param name="city">- Filter by full name of city messages were opened in, i.e. Minneapolis, Philadelphia  (optional)</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 GetMessageClicks (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string tag = null, string clientName = null, string clientCompany = null, string clientFamily = null, string osName = null, string osFamily = null, string osCompany = null, string platform = null, string country = null, string region = null, string city = null);

        /// <summary>
        /// Message clicks
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <param name="recipient">- Filter by To, Cc, Bcc  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="clientName">- Filter by client name, i.e. Outlook, Gmail  (optional)</param>
        /// <param name="clientCompany">- Filter by company, i.e. Microsoft, Apple, Google  (optional)</param>
        /// <param name="clientFamily">- Filter by client family, i.e. OS X, Chrome  (optional)</param>
        /// <param name="osName">- Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7  (optional)</param>
        /// <param name="osFamily">- Filter by kind of OS used without specific version, i.e. OS X, Windows  (optional)</param>
        /// <param name="osCompany">- Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation  (optional)</param>
        /// <param name="platform">- Filter by platform, i.e. webmail, desktop, mobile  (optional)</param>
        /// <param name="country">- Filter by country messages were opened in, i.e. Denmark, Russia  (optional)</param>
        /// <param name="region">- Filter by full name of region messages were opened in, i.e. Moscow, New York  (optional)</param>
        /// <param name="city">- Filter by full name of city messages were opened in, i.e. Minneapolis, Philadelphia  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> GetMessageClicksWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string tag = null, string clientName = null, string clientCompany = null, string clientFamily = null, string osName = null, string osFamily = null, string osCompany = null, string platform = null, string country = null, string region = null, string city = null);
        /// <summary>
        /// Message opens
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <param name="recipient">- Filter by To, Cc, Bcc  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="clientName">- Filter by client name, i.e. Outlook, Gmail  (optional)</param>
        /// <param name="clientCompany">- Filter by company, i.e. Microsoft, Apple, Google  (optional)</param>
        /// <param name="clientFamily">- Filter by client family, i.e. OS X, Chrome  (optional)</param>
        /// <param name="osName">- Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7  (optional)</param>
        /// <param name="osFamily">- Filter by kind of OS used without specific version, i.e. OS X, Windows  (optional)</param>
        /// <param name="osCompany">- Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation  (optional)</param>
        /// <param name="platform">- Filter by platform, i.e. webmail, desktop, mobile  (optional)</param>
        /// <param name="country">- Filter by country messages were opened in, i.e. Denmark, Russia  (optional)</param>
        /// <param name="region">- Filter by full name of region messages were opened in, i.e. Moscow, New York  (optional)</param>
        /// <param name="city">- Filter by full name of city messages were opened in, i.e. Minneapolis, Philadelphia  (optional)</param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 GetMessageOpens (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string tag = null, string clientName = null, string clientCompany = null, string clientFamily = null, string osName = null, string osFamily = null, string osCompany = null, string platform = null, string country = null, string region = null, string city = null);

        /// <summary>
        /// Message opens
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <param name="recipient">- Filter by To, Cc, Bcc  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="clientName">- Filter by client name, i.e. Outlook, Gmail  (optional)</param>
        /// <param name="clientCompany">- Filter by company, i.e. Microsoft, Apple, Google  (optional)</param>
        /// <param name="clientFamily">- Filter by client family, i.e. OS X, Chrome  (optional)</param>
        /// <param name="osName">- Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7  (optional)</param>
        /// <param name="osFamily">- Filter by kind of OS used without specific version, i.e. OS X, Windows  (optional)</param>
        /// <param name="osCompany">- Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation  (optional)</param>
        /// <param name="platform">- Filter by platform, i.e. webmail, desktop, mobile  (optional)</param>
        /// <param name="country">- Filter by country messages were opened in, i.e. Denmark, Russia  (optional)</param>
        /// <param name="region">- Filter by full name of region messages were opened in, i.e. Moscow, New York  (optional)</param>
        /// <param name="city">- Filter by full name of city messages were opened in, i.e. Minneapolis, Philadelphia  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> GetMessageOpensWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string tag = null, string clientName = null, string clientCompany = null, string clientFamily = null, string osName = null, string osFamily = null, string osCompany = null, string platform = null, string country = null, string region = null, string city = null);
        /// <summary>
        /// Opens for a single message
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 GetOpensForSingleMessage (string accept, string xTrxApiKey, int? messageid, int? count, int? offset);

        /// <summary>
        /// Opens for a single message
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> GetOpensForSingleMessageWithHttpInfo (string accept, string xTrxApiKey, int? messageid, int? count, int? offset);
        /// <summary>
        /// Outbound message details
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 GetOutboundMessageDetails (string accept, string xTrxApiKey, int? messageid);

        /// <summary>
        /// Outbound message details
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> GetOutboundMessageDetailsWithHttpInfo (string accept, string xTrxApiKey, int? messageid);
        /// <summary>
        /// Outbound message dump
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GetOutboundMessageDump (string accept, string xTrxApiKey, int? messageid);

        /// <summary>
        /// Outbound message dump
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GetOutboundMessageDumpWithHttpInfo (string accept, string xTrxApiKey, int? messageid);
        /// <summary>
        /// Outbound message search
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of records to return per request. Max 500. </param>
        /// <param name="offset">- Number of records to skip. </param>
        /// <param name="subject">- Filter by email subject. </param>
        /// <param name="recipient">- Filter by the user who was receiving the email.  (optional)</param>
        /// <param name="fromemail">- Filter by the sender email address.  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="status">- Filter by status (queued or sent / processed). Note that sent and processed will return the same results and can be used interchangeably.  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 GetOutboundMessageSearch (string accept, string xTrxApiKey, int? count, int? offset, string subject, string recipient = null, string fromemail = null, string tag = null, string status = null, string todate = null, string fromdate = null);

        /// <summary>
        /// Outbound message search
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of records to return per request. Max 500. </param>
        /// <param name="offset">- Number of records to skip. </param>
        /// <param name="subject">- Filter by email subject. </param>
        /// <param name="recipient">- Filter by the user who was receiving the email.  (optional)</param>
        /// <param name="fromemail">- Filter by the sender email address.  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="status">- Filter by status (queued or sent / processed). Note that sent and processed will return the same results and can be used interchangeably.  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> GetOutboundMessageSearchWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string subject, string recipient = null, string fromemail = null, string tag = null, string status = null, string todate = null, string fromdate = null);
        /// <summary>
        /// Retry a failed inbound message for processing
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 RetryFailedInboundMessageForProcessing (string accept, string xTrxApiKey, int? messageid);

        /// <summary>
        /// Retry a failed inbound message for processing
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> RetryFailedInboundMessageForProcessingWithHttpInfo (string accept, string xTrxApiKey, int? messageid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Bypass rules for a blocked inbound message
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> BypassRulesForBlockedInboundMessageAsync (string accept, string xTrxApiKey, int? messageid);

        /// <summary>
        /// Bypass rules for a blocked inbound message
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> BypassRulesForBlockedInboundMessageAsyncWithHttpInfo (string accept, string xTrxApiKey, int? messageid);
        /// <summary>
        /// Clicks for a single message
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> GetClicksForSingleMessageAsync (string accept, string xTrxApiKey, int? messageid, int? count, int? offset);

        /// <summary>
        /// Clicks for a single message
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GetClicksForSingleMessageAsyncWithHttpInfo (string accept, string xTrxApiKey, int? messageid, int? count, int? offset);
        /// <summary>
        /// Inbound message details
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> GetInboundMessageDetailsAsync (string accept, string xTrxApiKey, int? messageid);

        /// <summary>
        /// Inbound message details
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GetInboundMessageDetailsAsyncWithHttpInfo (string accept, string xTrxApiKey, int? messageid);
        /// <summary>
        /// Inbound message search
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of records to return per request. Max 500. </param>
        /// <param name="offset">- Number of records to skip. </param>
        /// <param name="recipient">- Filter by the user who was receiving the email.  (optional)</param>
        /// <param name="fromemail">- Filter by the sender email address.  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="subject">- Filter by email subject.  (optional)</param>
        /// <param name="mailboxhash">- Filter by mailboxhash.  (optional)</param>
        /// <param name="status">- Filter by status (blocked, processed / sent, queued, failed, scheduled)  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> GetInboundMessageSearchAsync (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string fromemail = null, string tag = null, string subject = null, string mailboxhash = null, string status = null, string todate = null, string fromdate = null);

        /// <summary>
        /// Inbound message search
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of records to return per request. Max 500. </param>
        /// <param name="offset">- Number of records to skip. </param>
        /// <param name="recipient">- Filter by the user who was receiving the email.  (optional)</param>
        /// <param name="fromemail">- Filter by the sender email address.  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="subject">- Filter by email subject.  (optional)</param>
        /// <param name="mailboxhash">- Filter by mailboxhash.  (optional)</param>
        /// <param name="status">- Filter by status (blocked, processed / sent, queued, failed, scheduled)  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> GetInboundMessageSearchAsyncWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string fromemail = null, string tag = null, string subject = null, string mailboxhash = null, string status = null, string todate = null, string fromdate = null);
        /// <summary>
        /// Message clicks
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <param name="recipient">- Filter by To, Cc, Bcc  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="clientName">- Filter by client name, i.e. Outlook, Gmail  (optional)</param>
        /// <param name="clientCompany">- Filter by company, i.e. Microsoft, Apple, Google  (optional)</param>
        /// <param name="clientFamily">- Filter by client family, i.e. OS X, Chrome  (optional)</param>
        /// <param name="osName">- Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7  (optional)</param>
        /// <param name="osFamily">- Filter by kind of OS used without specific version, i.e. OS X, Windows  (optional)</param>
        /// <param name="osCompany">- Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation  (optional)</param>
        /// <param name="platform">- Filter by platform, i.e. webmail, desktop, mobile  (optional)</param>
        /// <param name="country">- Filter by country messages were opened in, i.e. Denmark, Russia  (optional)</param>
        /// <param name="region">- Filter by full name of region messages were opened in, i.e. Moscow, New York  (optional)</param>
        /// <param name="city">- Filter by full name of city messages were opened in, i.e. Minneapolis, Philadelphia  (optional)</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> GetMessageClicksAsync (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string tag = null, string clientName = null, string clientCompany = null, string clientFamily = null, string osName = null, string osFamily = null, string osCompany = null, string platform = null, string country = null, string region = null, string city = null);

        /// <summary>
        /// Message clicks
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <param name="recipient">- Filter by To, Cc, Bcc  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="clientName">- Filter by client name, i.e. Outlook, Gmail  (optional)</param>
        /// <param name="clientCompany">- Filter by company, i.e. Microsoft, Apple, Google  (optional)</param>
        /// <param name="clientFamily">- Filter by client family, i.e. OS X, Chrome  (optional)</param>
        /// <param name="osName">- Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7  (optional)</param>
        /// <param name="osFamily">- Filter by kind of OS used without specific version, i.e. OS X, Windows  (optional)</param>
        /// <param name="osCompany">- Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation  (optional)</param>
        /// <param name="platform">- Filter by platform, i.e. webmail, desktop, mobile  (optional)</param>
        /// <param name="country">- Filter by country messages were opened in, i.e. Denmark, Russia  (optional)</param>
        /// <param name="region">- Filter by full name of region messages were opened in, i.e. Moscow, New York  (optional)</param>
        /// <param name="city">- Filter by full name of city messages were opened in, i.e. Minneapolis, Philadelphia  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GetMessageClicksAsyncWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string tag = null, string clientName = null, string clientCompany = null, string clientFamily = null, string osName = null, string osFamily = null, string osCompany = null, string platform = null, string country = null, string region = null, string city = null);
        /// <summary>
        /// Message opens
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <param name="recipient">- Filter by To, Cc, Bcc  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="clientName">- Filter by client name, i.e. Outlook, Gmail  (optional)</param>
        /// <param name="clientCompany">- Filter by company, i.e. Microsoft, Apple, Google  (optional)</param>
        /// <param name="clientFamily">- Filter by client family, i.e. OS X, Chrome  (optional)</param>
        /// <param name="osName">- Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7  (optional)</param>
        /// <param name="osFamily">- Filter by kind of OS used without specific version, i.e. OS X, Windows  (optional)</param>
        /// <param name="osCompany">- Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation  (optional)</param>
        /// <param name="platform">- Filter by platform, i.e. webmail, desktop, mobile  (optional)</param>
        /// <param name="country">- Filter by country messages were opened in, i.e. Denmark, Russia  (optional)</param>
        /// <param name="region">- Filter by full name of region messages were opened in, i.e. Moscow, New York  (optional)</param>
        /// <param name="city">- Filter by full name of city messages were opened in, i.e. Minneapolis, Philadelphia  (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> GetMessageOpensAsync (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string tag = null, string clientName = null, string clientCompany = null, string clientFamily = null, string osName = null, string osFamily = null, string osCompany = null, string platform = null, string country = null, string region = null, string city = null);

        /// <summary>
        /// Message opens
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <param name="recipient">- Filter by To, Cc, Bcc  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="clientName">- Filter by client name, i.e. Outlook, Gmail  (optional)</param>
        /// <param name="clientCompany">- Filter by company, i.e. Microsoft, Apple, Google  (optional)</param>
        /// <param name="clientFamily">- Filter by client family, i.e. OS X, Chrome  (optional)</param>
        /// <param name="osName">- Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7  (optional)</param>
        /// <param name="osFamily">- Filter by kind of OS used without specific version, i.e. OS X, Windows  (optional)</param>
        /// <param name="osCompany">- Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation  (optional)</param>
        /// <param name="platform">- Filter by platform, i.e. webmail, desktop, mobile  (optional)</param>
        /// <param name="country">- Filter by country messages were opened in, i.e. Denmark, Russia  (optional)</param>
        /// <param name="region">- Filter by full name of region messages were opened in, i.e. Moscow, New York  (optional)</param>
        /// <param name="city">- Filter by full name of city messages were opened in, i.e. Minneapolis, Philadelphia  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GetMessageOpensAsyncWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string tag = null, string clientName = null, string clientCompany = null, string clientFamily = null, string osName = null, string osFamily = null, string osCompany = null, string platform = null, string country = null, string region = null, string city = null);
        /// <summary>
        /// Opens for a single message
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> GetOpensForSingleMessageAsync (string accept, string xTrxApiKey, int? messageid, int? count, int? offset);

        /// <summary>
        /// Opens for a single message
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GetOpensForSingleMessageAsyncWithHttpInfo (string accept, string xTrxApiKey, int? messageid, int? count, int? offset);
        /// <summary>
        /// Outbound message details
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> GetOutboundMessageDetailsAsync (string accept, string xTrxApiKey, int? messageid);

        /// <summary>
        /// Outbound message details
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GetOutboundMessageDetailsAsyncWithHttpInfo (string accept, string xTrxApiKey, int? messageid);
        /// <summary>
        /// Outbound message dump
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GetOutboundMessageDumpAsync (string accept, string xTrxApiKey, int? messageid);

        /// <summary>
        /// Outbound message dump
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GetOutboundMessageDumpAsyncWithHttpInfo (string accept, string xTrxApiKey, int? messageid);
        /// <summary>
        /// Outbound message search
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of records to return per request. Max 500. </param>
        /// <param name="offset">- Number of records to skip. </param>
        /// <param name="subject">- Filter by email subject. </param>
        /// <param name="recipient">- Filter by the user who was receiving the email.  (optional)</param>
        /// <param name="fromemail">- Filter by the sender email address.  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="status">- Filter by status (queued or sent / processed). Note that sent and processed will return the same results and can be used interchangeably.  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> GetOutboundMessageSearchAsync (string accept, string xTrxApiKey, int? count, int? offset, string subject, string recipient = null, string fromemail = null, string tag = null, string status = null, string todate = null, string fromdate = null);

        /// <summary>
        /// Outbound message search
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of records to return per request. Max 500. </param>
        /// <param name="offset">- Number of records to skip. </param>
        /// <param name="subject">- Filter by email subject. </param>
        /// <param name="recipient">- Filter by the user who was receiving the email.  (optional)</param>
        /// <param name="fromemail">- Filter by the sender email address.  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="status">- Filter by status (queued or sent / processed). Note that sent and processed will return the same results and can be used interchangeably.  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetOutboundMessageSearchAsyncWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string subject, string recipient = null, string fromemail = null, string tag = null, string status = null, string todate = null, string fromdate = null);
        /// <summary>
        /// Retry a failed inbound message for processing
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> RetryFailedInboundMessageForProcessingAsync (string accept, string xTrxApiKey, int? messageid);

        /// <summary>
        /// Retry a failed inbound message for processing
        /// </summary>
        /// <remarks>
        /// Authorization: Bearer X-Trx-Api-Key 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> RetryFailedInboundMessageForProcessingAsyncWithHttpInfo (string accept, string xTrxApiKey, int? messageid);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessagesAPIApi : IMessagesAPIApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagesAPIApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessagesAPIApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Bypass rules for a blocked inbound message Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 BypassRulesForBlockedInboundMessage (string accept, string xTrxApiKey, int? messageid)
        {
             ApiResponse<InlineResponse20018> localVarResponse = BypassRulesForBlockedInboundMessageWithHttpInfo(accept, xTrxApiKey, messageid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bypass rules for a blocked inbound message Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public ApiResponse< InlineResponse20018 > BypassRulesForBlockedInboundMessageWithHttpInfo (string accept, string xTrxApiKey, int? messageid)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->BypassRulesForBlockedInboundMessage");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->BypassRulesForBlockedInboundMessage");
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesAPIApi->BypassRulesForBlockedInboundMessage");

            var localVarPath = "/messages/inbound/{messageid}/bypass";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BypassRulesForBlockedInboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20018) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        /// Bypass rules for a blocked inbound message Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> BypassRulesForBlockedInboundMessageAsync (string accept, string xTrxApiKey, int? messageid)
        {
             ApiResponse<InlineResponse20018> localVarResponse = await BypassRulesForBlockedInboundMessageAsyncWithHttpInfo(accept, xTrxApiKey, messageid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bypass rules for a blocked inbound message Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> BypassRulesForBlockedInboundMessageAsyncWithHttpInfo (string accept, string xTrxApiKey, int? messageid)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->BypassRulesForBlockedInboundMessage");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->BypassRulesForBlockedInboundMessage");
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesAPIApi->BypassRulesForBlockedInboundMessage");

            var localVarPath = "/messages/inbound/{messageid}/bypass";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BypassRulesForBlockedInboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20018) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        /// Clicks for a single message Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 GetClicksForSingleMessage (string accept, string xTrxApiKey, int? messageid, int? count, int? offset)
        {
             ApiResponse<InlineResponse20022> localVarResponse = GetClicksForSingleMessageWithHttpInfo(accept, xTrxApiKey, messageid, count, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clicks for a single message Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public ApiResponse< InlineResponse20022 > GetClicksForSingleMessageWithHttpInfo (string accept, string xTrxApiKey, int? messageid, int? count, int? offset)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetClicksForSingleMessage");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetClicksForSingleMessage");
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesAPIApi->GetClicksForSingleMessage");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling MessagesAPIApi->GetClicksForSingleMessage");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MessagesAPIApi->GetClicksForSingleMessage");

            var localVarPath = "/messages/outbound/clicks/{messageid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClicksForSingleMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20022) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        /// Clicks for a single message Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> GetClicksForSingleMessageAsync (string accept, string xTrxApiKey, int? messageid, int? count, int? offset)
        {
             ApiResponse<InlineResponse20022> localVarResponse = await GetClicksForSingleMessageAsyncWithHttpInfo(accept, xTrxApiKey, messageid, count, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clicks for a single message Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GetClicksForSingleMessageAsyncWithHttpInfo (string accept, string xTrxApiKey, int? messageid, int? count, int? offset)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetClicksForSingleMessage");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetClicksForSingleMessage");
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesAPIApi->GetClicksForSingleMessage");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling MessagesAPIApi->GetClicksForSingleMessage");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MessagesAPIApi->GetClicksForSingleMessage");

            var localVarPath = "/messages/outbound/clicks/{messageid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClicksForSingleMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20022) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        /// Inbound message details Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 GetInboundMessageDetails (string accept, string xTrxApiKey, int? messageid)
        {
             ApiResponse<InlineResponse20017> localVarResponse = GetInboundMessageDetailsWithHttpInfo(accept, xTrxApiKey, messageid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Inbound message details Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public ApiResponse< InlineResponse20017 > GetInboundMessageDetailsWithHttpInfo (string accept, string xTrxApiKey, int? messageid)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetInboundMessageDetails");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetInboundMessageDetails");
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesAPIApi->GetInboundMessageDetails");

            var localVarPath = "/messages/inbound/{messageid}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundMessageDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20017) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        /// Inbound message details Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> GetInboundMessageDetailsAsync (string accept, string xTrxApiKey, int? messageid)
        {
             ApiResponse<InlineResponse20017> localVarResponse = await GetInboundMessageDetailsAsyncWithHttpInfo(accept, xTrxApiKey, messageid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Inbound message details Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GetInboundMessageDetailsAsyncWithHttpInfo (string accept, string xTrxApiKey, int? messageid)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetInboundMessageDetails");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetInboundMessageDetails");
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesAPIApi->GetInboundMessageDetails");

            var localVarPath = "/messages/inbound/{messageid}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundMessageDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20017) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        /// Inbound message search Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of records to return per request. Max 500. </param>
        /// <param name="offset">- Number of records to skip. </param>
        /// <param name="recipient">- Filter by the user who was receiving the email.  (optional)</param>
        /// <param name="fromemail">- Filter by the sender email address.  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="subject">- Filter by email subject.  (optional)</param>
        /// <param name="mailboxhash">- Filter by mailboxhash.  (optional)</param>
        /// <param name="status">- Filter by status (blocked, processed / sent, queued, failed, scheduled)  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 GetInboundMessageSearch (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string fromemail = null, string tag = null, string subject = null, string mailboxhash = null, string status = null, string todate = null, string fromdate = null)
        {
             ApiResponse<InlineResponse20016> localVarResponse = GetInboundMessageSearchWithHttpInfo(accept, xTrxApiKey, count, offset, recipient, fromemail, tag, subject, mailboxhash, status, todate, fromdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Inbound message search Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of records to return per request. Max 500. </param>
        /// <param name="offset">- Number of records to skip. </param>
        /// <param name="recipient">- Filter by the user who was receiving the email.  (optional)</param>
        /// <param name="fromemail">- Filter by the sender email address.  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="subject">- Filter by email subject.  (optional)</param>
        /// <param name="mailboxhash">- Filter by mailboxhash.  (optional)</param>
        /// <param name="status">- Filter by status (blocked, processed / sent, queued, failed, scheduled)  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public ApiResponse< InlineResponse20016 > GetInboundMessageSearchWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string fromemail = null, string tag = null, string subject = null, string mailboxhash = null, string status = null, string todate = null, string fromdate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetInboundMessageSearch");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetInboundMessageSearch");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling MessagesAPIApi->GetInboundMessageSearch");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MessagesAPIApi->GetInboundMessageSearch");

            var localVarPath = "/messages/inbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (recipient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipient", recipient)); // query parameter
            if (fromemail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromemail", fromemail)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (subject != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subject", subject)); // query parameter
            if (mailboxhash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mailboxhash", mailboxhash)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundMessageSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20016) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        /// Inbound message search Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of records to return per request. Max 500. </param>
        /// <param name="offset">- Number of records to skip. </param>
        /// <param name="recipient">- Filter by the user who was receiving the email.  (optional)</param>
        /// <param name="fromemail">- Filter by the sender email address.  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="subject">- Filter by email subject.  (optional)</param>
        /// <param name="mailboxhash">- Filter by mailboxhash.  (optional)</param>
        /// <param name="status">- Filter by status (blocked, processed / sent, queued, failed, scheduled)  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> GetInboundMessageSearchAsync (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string fromemail = null, string tag = null, string subject = null, string mailboxhash = null, string status = null, string todate = null, string fromdate = null)
        {
             ApiResponse<InlineResponse20016> localVarResponse = await GetInboundMessageSearchAsyncWithHttpInfo(accept, xTrxApiKey, count, offset, recipient, fromemail, tag, subject, mailboxhash, status, todate, fromdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Inbound message search Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of records to return per request. Max 500. </param>
        /// <param name="offset">- Number of records to skip. </param>
        /// <param name="recipient">- Filter by the user who was receiving the email.  (optional)</param>
        /// <param name="fromemail">- Filter by the sender email address.  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="subject">- Filter by email subject.  (optional)</param>
        /// <param name="mailboxhash">- Filter by mailboxhash.  (optional)</param>
        /// <param name="status">- Filter by status (blocked, processed / sent, queued, failed, scheduled)  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> GetInboundMessageSearchAsyncWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string fromemail = null, string tag = null, string subject = null, string mailboxhash = null, string status = null, string todate = null, string fromdate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetInboundMessageSearch");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetInboundMessageSearch");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling MessagesAPIApi->GetInboundMessageSearch");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MessagesAPIApi->GetInboundMessageSearch");

            var localVarPath = "/messages/inbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (recipient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipient", recipient)); // query parameter
            if (fromemail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromemail", fromemail)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (subject != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subject", subject)); // query parameter
            if (mailboxhash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mailboxhash", mailboxhash)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundMessageSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20016) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        /// Message clicks Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <param name="recipient">- Filter by To, Cc, Bcc  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="clientName">- Filter by client name, i.e. Outlook, Gmail  (optional)</param>
        /// <param name="clientCompany">- Filter by company, i.e. Microsoft, Apple, Google  (optional)</param>
        /// <param name="clientFamily">- Filter by client family, i.e. OS X, Chrome  (optional)</param>
        /// <param name="osName">- Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7  (optional)</param>
        /// <param name="osFamily">- Filter by kind of OS used without specific version, i.e. OS X, Windows  (optional)</param>
        /// <param name="osCompany">- Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation  (optional)</param>
        /// <param name="platform">- Filter by platform, i.e. webmail, desktop, mobile  (optional)</param>
        /// <param name="country">- Filter by country messages were opened in, i.e. Denmark, Russia  (optional)</param>
        /// <param name="region">- Filter by full name of region messages were opened in, i.e. Moscow, New York  (optional)</param>
        /// <param name="city">- Filter by full name of city messages were opened in, i.e. Minneapolis, Philadelphia  (optional)</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 GetMessageClicks (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string tag = null, string clientName = null, string clientCompany = null, string clientFamily = null, string osName = null, string osFamily = null, string osCompany = null, string platform = null, string country = null, string region = null, string city = null)
        {
             ApiResponse<InlineResponse20022> localVarResponse = GetMessageClicksWithHttpInfo(accept, xTrxApiKey, count, offset, recipient, tag, clientName, clientCompany, clientFamily, osName, osFamily, osCompany, platform, country, region, city);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Message clicks Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <param name="recipient">- Filter by To, Cc, Bcc  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="clientName">- Filter by client name, i.e. Outlook, Gmail  (optional)</param>
        /// <param name="clientCompany">- Filter by company, i.e. Microsoft, Apple, Google  (optional)</param>
        /// <param name="clientFamily">- Filter by client family, i.e. OS X, Chrome  (optional)</param>
        /// <param name="osName">- Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7  (optional)</param>
        /// <param name="osFamily">- Filter by kind of OS used without specific version, i.e. OS X, Windows  (optional)</param>
        /// <param name="osCompany">- Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation  (optional)</param>
        /// <param name="platform">- Filter by platform, i.e. webmail, desktop, mobile  (optional)</param>
        /// <param name="country">- Filter by country messages were opened in, i.e. Denmark, Russia  (optional)</param>
        /// <param name="region">- Filter by full name of region messages were opened in, i.e. Moscow, New York  (optional)</param>
        /// <param name="city">- Filter by full name of city messages were opened in, i.e. Minneapolis, Philadelphia  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public ApiResponse< InlineResponse20022 > GetMessageClicksWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string tag = null, string clientName = null, string clientCompany = null, string clientFamily = null, string osName = null, string osFamily = null, string osCompany = null, string platform = null, string country = null, string region = null, string city = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetMessageClicks");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetMessageClicks");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling MessagesAPIApi->GetMessageClicks");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MessagesAPIApi->GetMessageClicks");

            var localVarPath = "/messages/outbound/clicks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (recipient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipient", recipient)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (clientName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_name", clientName)); // query parameter
            if (clientCompany != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_company", clientCompany)); // query parameter
            if (clientFamily != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_family", clientFamily)); // query parameter
            if (osName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "os_name", osName)); // query parameter
            if (osFamily != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "os_family", osFamily)); // query parameter
            if (osCompany != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "os_company", osCompany)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (region != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "region", region)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageClicks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20022) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        /// Message clicks Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <param name="recipient">- Filter by To, Cc, Bcc  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="clientName">- Filter by client name, i.e. Outlook, Gmail  (optional)</param>
        /// <param name="clientCompany">- Filter by company, i.e. Microsoft, Apple, Google  (optional)</param>
        /// <param name="clientFamily">- Filter by client family, i.e. OS X, Chrome  (optional)</param>
        /// <param name="osName">- Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7  (optional)</param>
        /// <param name="osFamily">- Filter by kind of OS used without specific version, i.e. OS X, Windows  (optional)</param>
        /// <param name="osCompany">- Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation  (optional)</param>
        /// <param name="platform">- Filter by platform, i.e. webmail, desktop, mobile  (optional)</param>
        /// <param name="country">- Filter by country messages were opened in, i.e. Denmark, Russia  (optional)</param>
        /// <param name="region">- Filter by full name of region messages were opened in, i.e. Moscow, New York  (optional)</param>
        /// <param name="city">- Filter by full name of city messages were opened in, i.e. Minneapolis, Philadelphia  (optional)</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> GetMessageClicksAsync (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string tag = null, string clientName = null, string clientCompany = null, string clientFamily = null, string osName = null, string osFamily = null, string osCompany = null, string platform = null, string country = null, string region = null, string city = null)
        {
             ApiResponse<InlineResponse20022> localVarResponse = await GetMessageClicksAsyncWithHttpInfo(accept, xTrxApiKey, count, offset, recipient, tag, clientName, clientCompany, clientFamily, osName, osFamily, osCompany, platform, country, region, city);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Message clicks Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <param name="recipient">- Filter by To, Cc, Bcc  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="clientName">- Filter by client name, i.e. Outlook, Gmail  (optional)</param>
        /// <param name="clientCompany">- Filter by company, i.e. Microsoft, Apple, Google  (optional)</param>
        /// <param name="clientFamily">- Filter by client family, i.e. OS X, Chrome  (optional)</param>
        /// <param name="osName">- Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7  (optional)</param>
        /// <param name="osFamily">- Filter by kind of OS used without specific version, i.e. OS X, Windows  (optional)</param>
        /// <param name="osCompany">- Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation  (optional)</param>
        /// <param name="platform">- Filter by platform, i.e. webmail, desktop, mobile  (optional)</param>
        /// <param name="country">- Filter by country messages were opened in, i.e. Denmark, Russia  (optional)</param>
        /// <param name="region">- Filter by full name of region messages were opened in, i.e. Moscow, New York  (optional)</param>
        /// <param name="city">- Filter by full name of city messages were opened in, i.e. Minneapolis, Philadelphia  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GetMessageClicksAsyncWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string tag = null, string clientName = null, string clientCompany = null, string clientFamily = null, string osName = null, string osFamily = null, string osCompany = null, string platform = null, string country = null, string region = null, string city = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetMessageClicks");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetMessageClicks");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling MessagesAPIApi->GetMessageClicks");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MessagesAPIApi->GetMessageClicks");

            var localVarPath = "/messages/outbound/clicks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (recipient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipient", recipient)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (clientName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_name", clientName)); // query parameter
            if (clientCompany != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_company", clientCompany)); // query parameter
            if (clientFamily != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_family", clientFamily)); // query parameter
            if (osName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "os_name", osName)); // query parameter
            if (osFamily != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "os_family", osFamily)); // query parameter
            if (osCompany != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "os_company", osCompany)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (region != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "region", region)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageClicks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20022) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        /// Message opens Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <param name="recipient">- Filter by To, Cc, Bcc  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="clientName">- Filter by client name, i.e. Outlook, Gmail  (optional)</param>
        /// <param name="clientCompany">- Filter by company, i.e. Microsoft, Apple, Google  (optional)</param>
        /// <param name="clientFamily">- Filter by client family, i.e. OS X, Chrome  (optional)</param>
        /// <param name="osName">- Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7  (optional)</param>
        /// <param name="osFamily">- Filter by kind of OS used without specific version, i.e. OS X, Windows  (optional)</param>
        /// <param name="osCompany">- Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation  (optional)</param>
        /// <param name="platform">- Filter by platform, i.e. webmail, desktop, mobile  (optional)</param>
        /// <param name="country">- Filter by country messages were opened in, i.e. Denmark, Russia  (optional)</param>
        /// <param name="region">- Filter by full name of region messages were opened in, i.e. Moscow, New York  (optional)</param>
        /// <param name="city">- Filter by full name of city messages were opened in, i.e. Minneapolis, Philadelphia  (optional)</param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 GetMessageOpens (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string tag = null, string clientName = null, string clientCompany = null, string clientFamily = null, string osName = null, string osFamily = null, string osCompany = null, string platform = null, string country = null, string region = null, string city = null)
        {
             ApiResponse<InlineResponse20020> localVarResponse = GetMessageOpensWithHttpInfo(accept, xTrxApiKey, count, offset, recipient, tag, clientName, clientCompany, clientFamily, osName, osFamily, osCompany, platform, country, region, city);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Message opens Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <param name="recipient">- Filter by To, Cc, Bcc  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="clientName">- Filter by client name, i.e. Outlook, Gmail  (optional)</param>
        /// <param name="clientCompany">- Filter by company, i.e. Microsoft, Apple, Google  (optional)</param>
        /// <param name="clientFamily">- Filter by client family, i.e. OS X, Chrome  (optional)</param>
        /// <param name="osName">- Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7  (optional)</param>
        /// <param name="osFamily">- Filter by kind of OS used without specific version, i.e. OS X, Windows  (optional)</param>
        /// <param name="osCompany">- Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation  (optional)</param>
        /// <param name="platform">- Filter by platform, i.e. webmail, desktop, mobile  (optional)</param>
        /// <param name="country">- Filter by country messages were opened in, i.e. Denmark, Russia  (optional)</param>
        /// <param name="region">- Filter by full name of region messages were opened in, i.e. Moscow, New York  (optional)</param>
        /// <param name="city">- Filter by full name of city messages were opened in, i.e. Minneapolis, Philadelphia  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public ApiResponse< InlineResponse20020 > GetMessageOpensWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string tag = null, string clientName = null, string clientCompany = null, string clientFamily = null, string osName = null, string osFamily = null, string osCompany = null, string platform = null, string country = null, string region = null, string city = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetMessageOpens");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetMessageOpens");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling MessagesAPIApi->GetMessageOpens");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MessagesAPIApi->GetMessageOpens");

            var localVarPath = "/messages/outbound/opens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (recipient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipient", recipient)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (clientName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_name", clientName)); // query parameter
            if (clientCompany != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_company", clientCompany)); // query parameter
            if (clientFamily != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_family", clientFamily)); // query parameter
            if (osName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "os_name", osName)); // query parameter
            if (osFamily != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "os_family", osFamily)); // query parameter
            if (osCompany != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "os_company", osCompany)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (region != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "region", region)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageOpens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20020>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20020) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20020)));
        }

        /// <summary>
        /// Message opens Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <param name="recipient">- Filter by To, Cc, Bcc  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="clientName">- Filter by client name, i.e. Outlook, Gmail  (optional)</param>
        /// <param name="clientCompany">- Filter by company, i.e. Microsoft, Apple, Google  (optional)</param>
        /// <param name="clientFamily">- Filter by client family, i.e. OS X, Chrome  (optional)</param>
        /// <param name="osName">- Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7  (optional)</param>
        /// <param name="osFamily">- Filter by kind of OS used without specific version, i.e. OS X, Windows  (optional)</param>
        /// <param name="osCompany">- Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation  (optional)</param>
        /// <param name="platform">- Filter by platform, i.e. webmail, desktop, mobile  (optional)</param>
        /// <param name="country">- Filter by country messages were opened in, i.e. Denmark, Russia  (optional)</param>
        /// <param name="region">- Filter by full name of region messages were opened in, i.e. Moscow, New York  (optional)</param>
        /// <param name="city">- Filter by full name of city messages were opened in, i.e. Minneapolis, Philadelphia  (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> GetMessageOpensAsync (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string tag = null, string clientName = null, string clientCompany = null, string clientFamily = null, string osName = null, string osFamily = null, string osCompany = null, string platform = null, string country = null, string region = null, string city = null)
        {
             ApiResponse<InlineResponse20020> localVarResponse = await GetMessageOpensAsyncWithHttpInfo(accept, xTrxApiKey, count, offset, recipient, tag, clientName, clientCompany, clientFamily, osName, osFamily, osCompany, platform, country, region, city);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Message opens Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <param name="recipient">- Filter by To, Cc, Bcc  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="clientName">- Filter by client name, i.e. Outlook, Gmail  (optional)</param>
        /// <param name="clientCompany">- Filter by company, i.e. Microsoft, Apple, Google  (optional)</param>
        /// <param name="clientFamily">- Filter by client family, i.e. OS X, Chrome  (optional)</param>
        /// <param name="osName">- Filter by full OS name and specific version, i.e. OS X 10.9 Mavericks, Windows 7  (optional)</param>
        /// <param name="osFamily">- Filter by kind of OS used without specific version, i.e. OS X, Windows  (optional)</param>
        /// <param name="osCompany">- Filter by company which produced the OS, i.e. Apple Computer, Inc., Microsoft Corporation  (optional)</param>
        /// <param name="platform">- Filter by platform, i.e. webmail, desktop, mobile  (optional)</param>
        /// <param name="country">- Filter by country messages were opened in, i.e. Denmark, Russia  (optional)</param>
        /// <param name="region">- Filter by full name of region messages were opened in, i.e. Moscow, New York  (optional)</param>
        /// <param name="city">- Filter by full name of city messages were opened in, i.e. Minneapolis, Philadelphia  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GetMessageOpensAsyncWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string recipient = null, string tag = null, string clientName = null, string clientCompany = null, string clientFamily = null, string osName = null, string osFamily = null, string osCompany = null, string platform = null, string country = null, string region = null, string city = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetMessageOpens");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetMessageOpens");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling MessagesAPIApi->GetMessageOpens");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MessagesAPIApi->GetMessageOpens");

            var localVarPath = "/messages/outbound/opens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (recipient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipient", recipient)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (clientName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_name", clientName)); // query parameter
            if (clientCompany != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_company", clientCompany)); // query parameter
            if (clientFamily != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_family", clientFamily)); // query parameter
            if (osName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "os_name", osName)); // query parameter
            if (osFamily != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "os_family", osFamily)); // query parameter
            if (osCompany != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "os_company", osCompany)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (region != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "region", region)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageOpens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20020>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20020) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20020)));
        }

        /// <summary>
        /// Opens for a single message Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 GetOpensForSingleMessage (string accept, string xTrxApiKey, int? messageid, int? count, int? offset)
        {
             ApiResponse<InlineResponse20021> localVarResponse = GetOpensForSingleMessageWithHttpInfo(accept, xTrxApiKey, messageid, count, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Opens for a single message Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public ApiResponse< InlineResponse20021 > GetOpensForSingleMessageWithHttpInfo (string accept, string xTrxApiKey, int? messageid, int? count, int? offset)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetOpensForSingleMessage");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetOpensForSingleMessage");
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesAPIApi->GetOpensForSingleMessage");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling MessagesAPIApi->GetOpensForSingleMessage");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MessagesAPIApi->GetOpensForSingleMessage");

            var localVarPath = "/messages/outbound/opens/{messageid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpensForSingleMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        /// Opens for a single message Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021> GetOpensForSingleMessageAsync (string accept, string xTrxApiKey, int? messageid, int? count, int? offset)
        {
             ApiResponse<InlineResponse20021> localVarResponse = await GetOpensForSingleMessageAsyncWithHttpInfo(accept, xTrxApiKey, messageid, count, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Opens for a single message Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <param name="count">- Number of message opens to return per request. Max 500. </param>
        /// <param name="offset">- Number of messages to skip </param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GetOpensForSingleMessageAsyncWithHttpInfo (string accept, string xTrxApiKey, int? messageid, int? count, int? offset)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetOpensForSingleMessage");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetOpensForSingleMessage");
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesAPIApi->GetOpensForSingleMessage");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling MessagesAPIApi->GetOpensForSingleMessage");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MessagesAPIApi->GetOpensForSingleMessage");

            var localVarPath = "/messages/outbound/opens/{messageid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpensForSingleMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        /// Outbound message details Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 GetOutboundMessageDetails (string accept, string xTrxApiKey, int? messageid)
        {
             ApiResponse<InlineResponse20014> localVarResponse = GetOutboundMessageDetailsWithHttpInfo(accept, xTrxApiKey, messageid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Outbound message details Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse< InlineResponse20014 > GetOutboundMessageDetailsWithHttpInfo (string accept, string xTrxApiKey, int? messageid)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetOutboundMessageDetails");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetOutboundMessageDetails");
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesAPIApi->GetOutboundMessageDetails");

            var localVarPath = "/messages/outbound/{messageid}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessageDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        /// Outbound message details Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> GetOutboundMessageDetailsAsync (string accept, string xTrxApiKey, int? messageid)
        {
             ApiResponse<InlineResponse20014> localVarResponse = await GetOutboundMessageDetailsAsyncWithHttpInfo(accept, xTrxApiKey, messageid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Outbound message details Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GetOutboundMessageDetailsAsyncWithHttpInfo (string accept, string xTrxApiKey, int? messageid)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetOutboundMessageDetails");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetOutboundMessageDetails");
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesAPIApi->GetOutboundMessageDetails");

            var localVarPath = "/messages/outbound/{messageid}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessageDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        /// Outbound message dump Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GetOutboundMessageDump (string accept, string xTrxApiKey, int? messageid)
        {
             ApiResponse<InlineResponse20015> localVarResponse = GetOutboundMessageDumpWithHttpInfo(accept, xTrxApiKey, messageid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Outbound message dump Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > GetOutboundMessageDumpWithHttpInfo (string accept, string xTrxApiKey, int? messageid)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetOutboundMessageDump");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetOutboundMessageDump");
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesAPIApi->GetOutboundMessageDump");

            var localVarPath = "/messages/outbound/{messageid}/dump";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessageDump", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// Outbound message dump Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> GetOutboundMessageDumpAsync (string accept, string xTrxApiKey, int? messageid)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await GetOutboundMessageDumpAsyncWithHttpInfo(accept, xTrxApiKey, messageid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Outbound message dump Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GetOutboundMessageDumpAsyncWithHttpInfo (string accept, string xTrxApiKey, int? messageid)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetOutboundMessageDump");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetOutboundMessageDump");
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesAPIApi->GetOutboundMessageDump");

            var localVarPath = "/messages/outbound/{messageid}/dump";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessageDump", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// Outbound message search Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of records to return per request. Max 500. </param>
        /// <param name="offset">- Number of records to skip. </param>
        /// <param name="subject">- Filter by email subject. </param>
        /// <param name="recipient">- Filter by the user who was receiving the email.  (optional)</param>
        /// <param name="fromemail">- Filter by the sender email address.  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="status">- Filter by status (queued or sent / processed). Note that sent and processed will return the same results and can be used interchangeably.  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 GetOutboundMessageSearch (string accept, string xTrxApiKey, int? count, int? offset, string subject, string recipient = null, string fromemail = null, string tag = null, string status = null, string todate = null, string fromdate = null)
        {
             ApiResponse<InlineResponse20013> localVarResponse = GetOutboundMessageSearchWithHttpInfo(accept, xTrxApiKey, count, offset, subject, recipient, fromemail, tag, status, todate, fromdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Outbound message search Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of records to return per request. Max 500. </param>
        /// <param name="offset">- Number of records to skip. </param>
        /// <param name="subject">- Filter by email subject. </param>
        /// <param name="recipient">- Filter by the user who was receiving the email.  (optional)</param>
        /// <param name="fromemail">- Filter by the sender email address.  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="status">- Filter by status (queued or sent / processed). Note that sent and processed will return the same results and can be used interchangeably.  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse< InlineResponse20013 > GetOutboundMessageSearchWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string subject, string recipient = null, string fromemail = null, string tag = null, string status = null, string todate = null, string fromdate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetOutboundMessageSearch");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetOutboundMessageSearch");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling MessagesAPIApi->GetOutboundMessageSearch");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MessagesAPIApi->GetOutboundMessageSearch");
            // verify the required parameter 'subject' is set
            if (subject == null)
                throw new ApiException(400, "Missing required parameter 'subject' when calling MessagesAPIApi->GetOutboundMessageSearch");

            var localVarPath = "/messages/outbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (recipient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipient", recipient)); // query parameter
            if (fromemail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromemail", fromemail)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (subject != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subject", subject)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessageSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        /// Outbound message search Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of records to return per request. Max 500. </param>
        /// <param name="offset">- Number of records to skip. </param>
        /// <param name="subject">- Filter by email subject. </param>
        /// <param name="recipient">- Filter by the user who was receiving the email.  (optional)</param>
        /// <param name="fromemail">- Filter by the sender email address.  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="status">- Filter by status (queued or sent / processed). Note that sent and processed will return the same results and can be used interchangeably.  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> GetOutboundMessageSearchAsync (string accept, string xTrxApiKey, int? count, int? offset, string subject, string recipient = null, string fromemail = null, string tag = null, string status = null, string todate = null, string fromdate = null)
        {
             ApiResponse<InlineResponse20013> localVarResponse = await GetOutboundMessageSearchAsyncWithHttpInfo(accept, xTrxApiKey, count, offset, subject, recipient, fromemail, tag, status, todate, fromdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Outbound message search Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="count">- Number of records to return per request. Max 500. </param>
        /// <param name="offset">- Number of records to skip. </param>
        /// <param name="subject">- Filter by email subject. </param>
        /// <param name="recipient">- Filter by the user who was receiving the email.  (optional)</param>
        /// <param name="fromemail">- Filter by the sender email address.  (optional)</param>
        /// <param name="tag">- Filter by tag  (optional)</param>
        /// <param name="status">- Filter by status (queued or sent / processed). Note that sent and processed will return the same results and can be used interchangeably.  (optional)</param>
        /// <param name="todate">- Filter messages up to the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <param name="fromdate">- Filter messages starting from the date specified (inclusive). e.g. 2014-02-01.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetOutboundMessageSearchAsyncWithHttpInfo (string accept, string xTrxApiKey, int? count, int? offset, string subject, string recipient = null, string fromemail = null, string tag = null, string status = null, string todate = null, string fromdate = null)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->GetOutboundMessageSearch");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->GetOutboundMessageSearch");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling MessagesAPIApi->GetOutboundMessageSearch");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling MessagesAPIApi->GetOutboundMessageSearch");
            // verify the required parameter 'subject' is set
            if (subject == null)
                throw new ApiException(400, "Missing required parameter 'subject' when calling MessagesAPIApi->GetOutboundMessageSearch");

            var localVarPath = "/messages/outbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (recipient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipient", recipient)); // query parameter
            if (fromemail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromemail", fromemail)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (todate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "todate", todate)); // query parameter
            if (fromdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromdate", fromdate)); // query parameter
            if (subject != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subject", subject)); // query parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessageSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        /// Retry a failed inbound message for processing Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 RetryFailedInboundMessageForProcessing (string accept, string xTrxApiKey, int? messageid)
        {
             ApiResponse<InlineResponse20019> localVarResponse = RetryFailedInboundMessageForProcessingWithHttpInfo(accept, xTrxApiKey, messageid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retry a failed inbound message for processing Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse< InlineResponse20019 > RetryFailedInboundMessageForProcessingWithHttpInfo (string accept, string xTrxApiKey, int? messageid)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->RetryFailedInboundMessageForProcessing");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->RetryFailedInboundMessageForProcessing");
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesAPIApi->RetryFailedInboundMessageForProcessing");

            var localVarPath = "/messages/inbound/{messageid}/retry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetryFailedInboundMessageForProcessing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        /// Retry a failed inbound message for processing Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> RetryFailedInboundMessageForProcessingAsync (string accept, string xTrxApiKey, int? messageid)
        {
             ApiResponse<InlineResponse20019> localVarResponse = await RetryFailedInboundMessageForProcessingAsyncWithHttpInfo(accept, xTrxApiKey, messageid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retry a failed inbound message for processing Authorization: Bearer X-Trx-Api-Key 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">- application/json </param>
        /// <param name="xTrxApiKey">- Find your API KEY in your ICOMMKT Account </param>
        /// <param name="messageid"></param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> RetryFailedInboundMessageForProcessingAsyncWithHttpInfo (string accept, string xTrxApiKey, int? messageid)
        {
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling MessagesAPIApi->RetryFailedInboundMessageForProcessing");
            // verify the required parameter 'xTrxApiKey' is set
            if (xTrxApiKey == null)
                throw new ApiException(400, "Missing required parameter 'xTrxApiKey' when calling MessagesAPIApi->RetryFailedInboundMessageForProcessing");
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesAPIApi->RetryFailedInboundMessageForProcessing");

            var localVarPath = "/messages/inbound/{messageid}/retry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (xTrxApiKey != null) localVarHeaderParams.Add("X-Trx-Api-Key", this.Configuration.ApiClient.ParameterToString(xTrxApiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetryFailedInboundMessageForProcessing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

    }
}
